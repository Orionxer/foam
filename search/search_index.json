{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Using Foam","text":"<p>Foam is a collection VS Code extensions and recipes that power up the editor into a full-blown note taking system. This folder contains user documentation describing how to get started using Foam, what its main features are, and strategies for getting the most out of Foam. The full docs are included in the <code>foam-template</code> repo that most users start from.</p> <p>See also frequently-asked-questions.</p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u811a\u6ce8\u200b <sup>1</sup></p> <p>\u200b\u53cc\u5411\u200b\u94fe\u63a5\u200b\u6d4b\u8bd5\u200b: C\u200b\u8bed\u8a00\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>get-started-with-vscode</li> <li>recommended-extensions</li> <li>creating-new-notes</li> <li>write-notes-in-foam</li> <li>sync-notes-with-source-control</li> <li>keyboard-shortcuts</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>wikilinks</li> <li>tags</li> <li>backlinking</li> <li>daily-notes</li> <li>including-notes</li> <li>spell-checking</li> <li>graph-visualization</li> <li>note-properties</li> <li>note-templates</li> <li>paste-images-from-clipboard</li> <li>custom-markdown-preview-styles</li> <li>link-reference-definitions</li> <li>custom-snippets</li> </ul>"},{"location":"#recipes","title":"Recipes","text":"<p>recipes is a collection of user-contributed patterns that describe different ways you could utilize Foam or integrate it with other tools.</p>"},{"location":"#publishing","title":"Publishing","text":"<p>You can publish your Foam notes for consumption in different formats. Examples: publish-to-github-pages, generate-gatsby-site, publish-to-vercel</p> <p>See publishing for more details.</p>"},{"location":"#tools","title":"Tools","text":"<ul> <li>cli</li> <li>workspace-janitor</li> <li>orphans</li> <li>foam-logging-in-vscode</li> </ul>"},{"location":"#mkdocs-material","title":"Mkdocs-Material","text":"<p>It's good to use mkdocs-material!</p>"},{"location":"#todo","title":"Todo","text":"<p>You can create todos in Foam.</p> <ul> <li> \u200b\u4fee\u590d\u200b\u56fe\u7247\u200b\u65e0\u6cd5\u8bbf\u95ee\u200b\u95ee\u9898\u200b, \u200b\u76ee\u5f55\u200b\u5c42\u7ea7\u200b\u95ee\u9898\u200b\uff0c/docs</li> <li> \u200b\u9009\u62e9\u200b\u66f4\u200b\u7f8e\u89c2\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0cpip \u200b\u5b89\u88c5\u200b\u5176\u4ed6\u200b\u4e3b\u9898\u200b</li> <li> \u200b\u67e5\u770b\u200b mkdocs \u200b\u548c\u200b mkdocs-material \u200b\u6587\u6863\u200b</li> <li> \u200b\u4fee\u590d\u200b\u516c\u5f0f\u200b\u65e0\u6cd5\u200b\u663e\u793a\u200b\u95ee\u9898\u200b</li> <li> \u200b\u5f3a\u5316\u200b\u4e2d\u6587\u641c\u7d22\u200b jieba</li> <li> \u200b\u6dfb\u52a0\u200bFoam\u200b\u8282\u70b9\u200b\u4e0d\u540c\u200b\u989c\u8272\u200b</li> <li> \u200b\u7f8e\u5316\u200bFoam\u200b\u8282\u70b9\u200b\u989c\u8272\u200b\uff0c\u200b\u6839\u636e\u200b\u7b49\u7ea7\u200b\u5212\u5206\u200b\uff0c\u200b\u5c3d\u53ef\u80fd\u200b\u4fdd\u8bc1\u200b\u8272\u5f69\u200b\u534f\u8c03\u6027\u200b,\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200b\u83ab\u5170\u8fea\u200b\u8272\u7cfb\u200b\uff0c\u200b\u6216\u8005\u200b\u53c2\u8003\u200bobsidian\u200b\u4f18\u79c0\u200b\u914d\u8272\u200b(\u200b\u56fe\u8c31\u200b)</li> <li> .gitignore\u200b\u5c1d\u8bd5\u200b\u5ffd\u7565\u200bsite\u200b\u6587\u4ef6\u5939\u200b</li> <li> ci.yml\u200b\u540c\u6b65\u200brequirements.txt</li> <li> README\u200b\u589e\u52a0\u200b\u5f00\u6e90\u200b\u534f\u8bae\u200b\u8bf4\u660e\u200b\uff0c\u200b\u672c\u200b\u9879\u76ee\u200b\u9075\u5b88\u200b<code>GPL 3.0</code>\u200b\u534f\u8bae\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u81ea\u7531\u200b\u590d\u5236\u200b\u4fee\u6539\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u6709\u200b\u5206\u53d1\u200b\u884c\u4e3a\u200b\uff08\u200b\u6bd4\u5982\u200b\u4e0a\u4f20\u200b\u81f3\u200bgithub\u200b\u4ed3\u5e93\u200b\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u4ed3\u5e93\u200b\u5c5e\u6027\u200b\u4e3a\u200b\u516c\u5f00\u200b\uff09\uff0c\u200b\u5219\u200b\u7ee7\u7eed\u200b\u9075\u5b88\u200b<code>GPL 3.0</code>\u200b\u534f\u8bae\u200b\u5373\u53ef\u200b\u3002\u200b\u81f3\u4e8e\u200b\u79bb\u7ebf\u200b\u4f7f\u7528\u200b\u6216\u8005\u200b\u5c06\u200b\u4ed3\u5e93\u200b\u5c5e\u6027\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u79c1\u6709\u200b\uff0c\u200b\u5219\u200b\u4e0d\u200b\u5728\u200b<code>GPL 3.0</code>\u200b\u534f\u8bae\u200b\u9650\u5236\u200b\u8303\u56f4\u200b\u4e4b\u5185\u200b\u3002\ud83c\udf7b</li> <li> \u200b\u5feb\u901f\u200b\u751f\u6210\u200b\u53cc\u94fe\u200b <code>/day</code> DailyNote-2024-10-15\uff0c\u200b\u589e\u52a0\u200bgif\u200b\u6f14\u793a\u200b</li> <li> \u200b\u5feb\u901f\u200b\u751f\u6210\u200b\u5934\u90e8\u200bmeta\u200b\u4fe1\u606f\u200b <code>/meta</code>, VSCode\u200b\u7684\u200b\u4ee3\u7801\u200b\u7247\u6bb5\u200b\u529f\u80fd\u200b,\u200b\u589e\u52a0\u200bgif\u200b\u6f14\u793a\u200b</li> <li> github pages\u200b\u8bbe\u7f6e\u200b\u81ea\u5b9a\u4e49\u200b\u57df\u540d\u89e3\u6790\u200b: foam.gogo.uno,\u200b\u65e7\u200b\u57df\u540d\u200b\u81ea\u52a8\u200b\u5931\u6548\u200b\uff0c\u200b\u6ce8\u610f\u200b\u901a\u914d\u7b26\u200bA\u200b\u8bb0\u5f55\u200b\u89e3\u6790\u200b\u4ee5\u53ca\u200bCNAME\u200b\u89e3\u6790\u200b\u8bb0\u5f55\u200b\u7684\u200b\u4f18\u5148\u7ea7\u200b\u95ee\u9898\u200b</li> <li> \u200b\u91cd\u65b0\u6574\u7406\u200b<code>mkdocs.yml</code>\u200b\u4ee5\u200bMaterial\u200b\u5b98\u7f51\u200b\u8bf4\u660e\u200b\u4e3a\u51c6\u200b</li> <li> \u200b\u8868\u683c\u200b\u7f8e\u5316\u200b,\u200b\u9ed8\u8ba4\u200b\u6837\u5f0f\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u7f8e\u5316\u200b</li> <li> \u200b\u4ee3\u7801\u200b\u5757\u200b\u7f8e\u5316\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u6837\u5f0f\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u7f8e\u5316\u200b</li> <li> Alt + C \u200b\u5207\u6362\u200b\u5f85\u529e\u200b\u5217\u8868\u200b\u72b6\u6001\u200b\uff0c\u200b\u589e\u52a0\u200bgif\u200b\u6f14\u793a\u200b</li> <li> \u200b\u589e\u52a0\u200b\u4ee3\u7801\u200b\u5757\u200b\u590d\u5236\u200b\u6309\u94ae\u200b</li> <li> \u200b\u6df1\u8272\u200b/\u200b\u5207\u8272\u200b\u6a21\u5f0f\u200b\u5207\u6362\u200b</li> <li> This is an example of a todo list item that's complete</li> <li> This one is not completed yet</li> </ul> <p>\u200b\u901a\u8fc7\u200bgithub/gitee page\u200b\u751f\u6210\u200b\u7f51\u9875\u200b\uff0c\u200b\u5206\u4eab\u200b\u4f60\u200b\u7684\u200bfoam/obsidian/markdown\u200b\u7b14\u8bb0\u200b</p> <p>VS Code \u200b\u4e2d\u200b\u7684\u200b\u53cc\u94fe\u200b\u7b14\u8bb0\u200b\uff1aFoam \u200b\u4f7f\u7528\u200b\u4f53\u9a8c\u200b\u5206\u4eab\u200b</p> <p>Foam\u200b\u4f7f\u7528\u200b\u8bf4\u660e\u200b</p> <p>MkDocs\u200b\u4e2d\u6587\u200b\u6587\u6863\u200b</p> <p>MkDocs - Project documentation with Markdown</p> <p>\ud83c\udfc6 \ud83d\udcda A list of awesome MkDocs projects and plugins.</p>"},{"location":"#_1","title":"\u672c\u5730\u200b\u90e8\u7f72","text":"<pre><code>pip install -U -r requirements.txt\nmkdocs serve \n</code></pre>"},{"location":"#code-snippet","title":"Code Snippet","text":"demo.c<pre><code>/******************************************************\n * @brief   \u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200bC\u200b\u51fd\u6570\u200b\n * @note    \u200b\u6ca1\u6709\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\n ******************************************************/\nfor (size_t i = 0; i &lt; 5; i++)\n{\n    printf(\"Hello World\\n\");   \n}\n</code></pre> <pre><code>echo \"Hello World\"\n</code></pre> <p>Inline math: \\(x^2\\)</p> <p>Math block:</p> \\[ \\displaystyle \\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right) \\] <p></p>"},{"location":"#git-commitemoji","title":"Git Commit\u200b\u5e38\u7528\u200bEmoji","text":"Emoji \u200b\u63cf\u8ff0\u200b Description \ud83c\udf89 \u200b\u521b\u5efa\u200b\u65b0\u200b\u5de5\u7a0b\u200b Beginaproject \u2728 \u200b\u65b0\u200b\u529f\u80fd\u200b Introducenewfeatures \ud83d\udc1b \u200b\u4fee\u590d\u200bBug Fixabug \ud83d\udd00 \u200b\u5408\u5e76\u200b\u5206\u652f\u200b Mergebranches \u26a1\ufe0f \u200b\u6027\u80fd\u200b\u63d0\u5347\u200b Improveperformance \u2705 \u200b\u901a\u8fc7\u200b\u6d4b\u8bd5\u200b Add,update,orpasstests. \u267b\ufe0f \u200b\u91cd\u6784\u200b Refactorcode \ud83d\udd25 \u200b\u5220\u9664\u200b\u4ee3\u7801\u200b\u6216\u200b\u6587\u4ef6\u200b Removecodeorfiles \ud83d\udcdd \u200b\u66f4\u65b0\u200b\u6587\u6863\u200b\u6216\u200b\u534f\u8bae\u200b Addorupdatedocumentation. \ud83d\udd16 \u200b\u53d1\u5e03\u200b\u7248\u672c\u200b Release/Versiontags \ud83d\udca1 \u200b\u589e\u52a0\u200b\u6ce8\u91ca\u200b Addorupdatecommentsinsourcecode. Tips for collapsed sections  You can add an image or a code block, too.  <pre><code>puts \"Hello World\"~~~~\n</code></pre> <p>Abstract</p> <p>This is a abstract test.</p> <p>Info</p> <p>This is a info test.</p> <p>Question</p> <p>This is a question test.</p> <p>Warning</p> <p>This is a warning test.</p> <p>Failure</p> <p>This is a failure test.</p> <p>Danger</p> <p>This is a danger test.</p> <p>Bug</p> <p>This is a bug test.</p> <p>Example</p> <p>This is a example test.</p> Success <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#27th","title":"27<sup>th</sup>","text":"What's your day today <p>Not a bad day.</p> <ol> <li> <p>\u200b\u811a\u6ce8\u200b 1\u00a0\u21a9</p> </li> </ol>"},{"location":"C%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/","title":"C\u200b\u8bed\u8a00\u200b\u56de\u8c03\u200b\u51fd\u6570","text":"","tags":["C"]},{"location":"C%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/#demo","title":"Demo","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// Define the callback function type\ntypedef void (*CallbackFunction)(void);\n\n// A simple callback function\nvoid my_callback() {\n    printf(\"Callback function executed.\\n\");\n}\n\n// Function that accepts a callback and executes it\nvoid execute_callback(CallbackFunction cb) {\n    printf(\"Executing callback...\\n\");\n    // Call the callback function\n    cb();\n    printf(\"Callback execution finished.\\n\");\n}\n\nint main() {\n    // Pass the callback function to execute_callback\n    execute_callback(my_callback);\n    return 0;\n}\n</code></pre>","tags":["C"]},{"location":"DailyNote-2024-10-15/","title":"DailyNote-2024-10-15","text":"<p>\u200b\u8f93\u5165\u200b<code>/stamp</code>\u200b\u4ee5\u200b\u67e5\u770b\u200b\u6548\u679c\u200b This Note Updated at : 2024-10-15, 14: 40 - \u200b\u5b8c\u6210\u200b\u76f8\u5173\u200bTODO</p>"},{"location":"frequently-asked-questions/","title":"Frequently Asked Questions","text":"<p>\u26a0\ufe0f Foam is still in preview. Expect the experience to be a little rough.</p> <ul> <li>Frequently Asked Questions</li> <li>Links/Graphs/BackLinks don't work. How do I enable them?</li> <li>I don't want Foam enabled for all my workspaces</li> <li>I want to publish the graph view to GitHub pages or Vercel</li> </ul>"},{"location":"frequently-asked-questions/#linksgraphsbacklinks-dont-work-how-do-i-enable-them","title":"Links/Graphs/BackLinks don't work. How do I enable them?","text":"<ul> <li>Ensure that you have all the recommended-extensions installed in Visual Studio Code</li> <li>Reload Visual Studio Code by running <code>Cmd</code> + <code>Shift</code> + <code>P</code> (<code>Ctrl</code> + <code>Shift</code> + <code>P</code> for Windows), type \"reload\" and run the Developer: Reload Window command to for the updated extensions take effect</li> <li>Check the formatting rules for links on [[foam-file-format]] and wikilinks</li> </ul>"},{"location":"frequently-asked-questions/#i-dont-want-foam-enabled-for-all-my-workspaces","title":"I don't want Foam enabled for all my workspaces","text":"<p>Any extension you install in Visual Studio Code is enabled by default. Given the philosophy of Foam, it works out of the box without doing any configuration upfront. In case you want to disable Foam for a specific workspace, or disable Foam by default and enable it for specific workspaces, it is advised to follow the best practices as documented by Visual Studio Code</p>"},{"location":"frequently-asked-questions/#i-want-to-publish-the-graph-view-to-github-pages-or-vercel","title":"I want to publish the graph view to GitHub pages or Vercel","text":"<p>If you want a different front-end look to your published foam and a way to see your graph view, we'd recommend checking out these templates: - foam-gatsby by Mathieu Dutour - foam-gatsby-kb by hikerpig</p>"},{"location":"todo/","title":"\u5f85\u529e\u200b\u5217\u8868","text":"<p>You can create todos in Foam.</p> <ul> <li> This is an example of a todo list item that's complete</li> <li> This one is not completed yet</li> <li> You can mark it completed by pressing <code>Option</code>+<code>C</code> (or <code>Alt</code>+<code>C</code>) when your cursor is on this line</li> <li> You can also select multiple lines and mark them all at once!</li> <li> Trying the Backlinking [[New Idea]]</li> </ul> <p></p>","tags":["C","CPP","HTML5"]},{"location":"features/backlinking/","title":"Backlinking","text":"<p>When using wikilinks, you can find all notes that link to a specific note in the Connections Explorer</p> <ul> <li>Run <code>Cmd</code> + <code>Shift</code> + <code>P</code> (<code>Ctrl</code> + <code>Shift</code> + <code>P</code> for Windows), type \"connections\" and run the Explorer: Focus on Connections view.</li> <li>Keep this pane always visible to discover relationships between your thoughts</li> <li>You can drag the connections panel to a different section in VS Code if you prefer. See: make-backlinks-more-prominent</li> <li>You can filter the connections to see just backlinks, forward links, or all connections</li> <li>Finding backlinks in published Foam workspaces via [[materialized-backlinks]] is on the [[roadmap]] but not yet implemented.</li> </ul>"},{"location":"features/built-in-note-embedding-types/","title":"Built-In Note Embedding Types","text":"<p>When embedding a note, there are a few ways to modify the scope of the content as well as its display style. The following are Foam keywords that are used to describe note embedding.</p> <p>Note, this only applies to note embedding, not embedding of attachments or images.</p> <p></p>"},{"location":"features/built-in-note-embedding-types/#scope","title":"Scope","text":"<ul> <li><code>full</code> - the entire note in the case of <code>![[note]]</code> or the entire section in the case of <code>![[note#section1]]</code></li> <li><code>content</code> - everything excluding the title of the section. So the entire note minus the title for <code>![[note]]</code>, or the entire section minus the section header for <code>![[note#section1]]</code></li> </ul>"},{"location":"features/built-in-note-embedding-types/#style","title":"Style","text":"<ul> <li><code>card</code> - outlines the embedded note with a border</li> <li><code>inline</code> - adds the note continuously as if the text were part of the calling note</li> </ul>"},{"location":"features/built-in-note-embedding-types/#default-setting","title":"Default Setting","text":"<p>Foam expresses note display type as <code>&lt;scope&gt;-&lt;style&gt;</code>.</p> <p>By default, Foam configures note embedding to be <code>full-card</code>. That is, whenever the standard embedding syntax is used, <code>![[note]]</code>, the note will have <code>full</code> scope and <code>card</code> style display. This setting is stored under <code>foam.preview.embedNoteStyle</code> and can be modified.</p>"},{"location":"features/built-in-note-embedding-types/#explicit-modifiers","title":"Explicit Modifiers","text":"<p>Prepend the wikilink with one of the scope or style keywords, or a combination of the two to explicitly modify a note embedding if you would like to override the default setting.</p> <p>For example, given your <code>foam.embedNoteStyle</code> is set to <code>content-card</code>, embedding a note with standard syntax <code>![[note-a]]</code> would show a bordered note without its title. Say, for a specific <code>note-b</code> you would like to display the title. You can simply use one of the above keywords to override your default setting like so: <code>full![[note-b]]</code>. In this case, <code>full</code> overrides the default <code>content</code> scope and because a style is not specified, it falls back to the default style setting, <code>card</code>. If you would like it to be inline, override that as well: <code>full-inline![[note-b]]</code>.</p>"},{"location":"features/commands/","title":"Foam Commands","text":"<p>Foam has various commands that you can explore by calling the command palette and typing \"Foam\".</p> <p>In particular, some commands can be very customizable and can help with custom workflows and use cases.</p>"},{"location":"features/commands/#foam-vscodecreate-note-command","title":"foam-vscode.create-note command","text":"<p>This command creates a note. Although it works fine on its own, it can be customized to achieve various use cases. Here are the settings available for the command:</p> <ul> <li><code>notePath</code>: The path of the note to create. If relative it will be resolved against the workspace root.</li> <li><code>templatePath</code>: The path of the template to use. If relative it will be resolved against the workspace root.</li> <li><code>title</code>: The title of the note (that is, the <code>FOAM_TITLE</code> variable)</li> <li><code>text</code>: The text to use for the note. If also a template is provided, the template has precedence</li> <li><code>variables</code>: Variables to use in the text or template</li> <li><code>date</code>: The date used to resolve the FOAM*DATE** variables. in <code>YYYY-MM-DD</code> format</li> <li><code>onFileExists?: 'overwrite' | 'open' | 'ask' | 'cancel'</code>: What to do in case the target file already exists</li> </ul> <p>To customize a command and associate a key binding to it, open the key binding settings and add the appropriate configuration, here are some examples:</p> <ul> <li>Create a note called <code>test note.md</code> with some text. If the note already exists, ask for a new name</li> </ul> <pre><code>{\n  \"key\": \"alt+f\",\n  \"command\": \"foam-vscode.create-note\",\n  \"args\": {\n    \"text\": \"test note ${FOAM_DATE_YEAR}\",\n    \"notePath\": \"test note.md\",\n    \"onFileExists\": \"ask\"\n  }\n}\n</code></pre> <ul> <li>Create a note following the <code>weekly-note.md</code> template. If the note already exists, open it</li> </ul> <pre><code>{\n  \"key\": \"alt+g\",\n  \"command\": \"foam-vscode.create-note\",\n  \"args\": {\n    \"templatePath\": \".foam/templates/weekly-note.md\",\n    \"onFileExists\": \"open\"\n  }\n}\n</code></pre>"},{"location":"features/commands/#foam-vscodeopen-resource-command","title":"foam-vscode.open-resource command","text":"<p>This command opens a resource.</p> <p>Normally it receives a <code>URI</code>, which identifies the resource to open.</p> <p>It is also possible to pass in a filter, which will be run against the workspace resources to find one or more matches.</p> <ul> <li>If there is one match, it will be opened</li> <li>If there is more than one match, a quick pick will show up allowing the user to select the desired resource</li> </ul> <p>Examples:</p> <pre><code>{\n  \"key\": \"alt+f\",\n  \"command\": \"foam-vscode.open-resource\",\n  \"args\": {\n    \"filter\": {\n      \"title\": \"Weekly Note*\"\n    }\n  }\n}\n</code></pre>"},{"location":"features/custom-markdown-preview-styles/","title":"Custom Markdown Preview Styles","text":"<p>Visual Studio Code allows you to use your own CSS in the Markdown preview tab.</p>"},{"location":"features/custom-markdown-preview-styles/#instructions","title":"Instructions","text":"<p>Custom CSS for the Markdown preview can be implemented by using the <code>\"markdown.styles\": []</code> setting in <code>settings.json</code>. The stylesheets can either be https URLs or relative paths to local files in the current workspace.</p> <p>For example, to load a stylesheet called <code>Style.css</code>, we can update <code>settings.json</code> with the following line:</p> <pre><code>{\n  \"markdown.styles\": [\"Style.css\"]\n}\n</code></pre>"},{"location":"features/custom-markdown-preview-styles/#foam-elements","title":"Foam elements","text":""},{"location":"features/custom-markdown-preview-styles/#foam-note-placeholder-links","title":"Foam note &amp; placeholder links","text":"<p>It is possible to custom style the links to a note or placeholder. The links are an <code>&lt;a&gt;</code> tag. For notes use the class <code>foam-note-link</code>, for placeholders use <code>foam-placeholder-link</code>.</p>"},{"location":"features/custom-markdown-preview-styles/#cyclic-inclusion-warnings","title":"Cyclic inclusion warnings","text":"<p>Foams offers the functionality to include other notes in your note. This will be displayed in the preview tab. Foam recognises a cyclic inclusion of notes and will display a warning when detected. The following html is used and can be custom styled using the class <code>foam-cyclic-link-warning</code>.</p> <pre><code>&lt;div class=\"foam-cyclic-link-warning\"&gt;\n  Cyclic link detected for wikilink: ${wikilink}\n&lt;/div&gt;\n</code></pre>"},{"location":"features/custom-snippets/","title":"Adding Custom Snippets","text":"<p>You can add custom snippets whilst the default set of snippets are decided by following the below steps:</p> <ol> <li><code>Cmd</code> + <code>Shift</code> + <code>P</code> (<code>Ctrl</code> + <code>Shift</code> + <code>P</code> for Windows), type <code>snippets</code> and select <code>Preferences: Configure User Snippets</code>.</li> <li>The command palette will remain in focus. Search for <code>markdown</code> and select the entry entitled <code>markdown.json (Markdown)</code>.</li> <li>A JSON file will open. You can author your own snippets using the documentation to help you, or if you're using a snippet shared by another Foam user then you can copy and paste it in, as the below GIF demonstrates:    </li> </ol> <p>To get started, you might consider replacing the entire contents of the <code>markdown.json</code> file opened by the steps above with the JSON in this comment.</p>"},{"location":"features/daily-notes/","title":"Daily Notes","text":"<p>Daily notes allow you to quickly create and access a new notes file for each day. This is a surpisingly effective and increasingly common strategy to organize notes and manage events.</p> <p>View today's note file by running the <code>Foam: Open Daily Note</code> command, by using the shortcut <code>alt+d</code> (note: shortcuts can be overridden), or by using #snippets. The name, location, and title of daily notes files is #configurable.</p>"},{"location":"features/daily-notes/#roam-style-automatic-daily-notes","title":"Roam-style Automatic Daily Notes","text":"<p>You can automatically open today's note on startup by setting the <code>Foam \u203a Open Daily Note: On Startup</code> setting to <code>true</code>.</p>"},{"location":"features/daily-notes/#daily-note-templates","title":"Daily Note Templates","text":"<p>Daily notes can also make use of Note Templates, by defining a special <code>.foam/templates/daily-note.md</code> template.</p>"},{"location":"features/daily-notes/#snippets","title":"Snippets","text":"<p>Create a link to a recent daily note using snippets. Type <code>/today</code> and press <code>enter</code> to link to today's note. You can also write:</p> Snippet Date <code>/tomorrow</code> tomorrow <code>/yesterday</code> yesterday <code>/monday</code> next Monday <code>/+1d</code> tomorrow <code>/-3d</code> 3 days ago <code>/+1w</code> in a week <code>/-1m</code> one month ago <code>/+1y</code> in one year"},{"location":"features/daily-notes/#configuration","title":"Configuration","text":"<p>By default, Daily Notes will be created in a file called <code>yyyy-mm-dd.md</code> in the workspace's <code>journals</code> folder, with a heading <code>yyyy-mm-dd</code>.</p> <p>These settings can be overridden in your workspace or global <code>.vscode/settings.json</code> file, using the dateformat date masking syntax:</p> <p>It's possible to customize path and heading of your daily notes, by following the dateformat masking syntax. The following properties can be used:</p> <pre><code>  \"foam.openDailyNote.directory\": \"journal\",\n  \"foam.openDailyNote.filenameFormat\": \"'daily-note'-yyyy-mm-dd\",\n  \"foam.openDailyNote.fileExtension\": \"mdx\",\n  \"foam.openDailyNote.titleFormat\": \"'Journal Entry, ' dddd, mmmm d\",\n</code></pre> <p>The above configuration would create a file <code>journal/daily-note-2020-07-25.mdx</code>, with the heading <code>Journal Entry, Sunday, July 25</code>.</p> <p>NOTE: It is possible to set the filepath of a daily note according to the date using the special note-properties configurable for Note Templates. Specifically see Example of date-based filepath. Using the template property will override any setting configured through <code>.vscode/settings.json</code>.</p>"},{"location":"features/daily-notes/#extend-functionality-weekly-monthly-quarterly-notes","title":"Extend Functionality (Weekly, Monthly, Quarterly Notes)","text":"<p>Please see note-macros</p>"},{"location":"features/graph-visualization/","title":"Graph Visualization","text":"<p>Foam comes with a graph visualization of your notes. To see the graph execute the <code>Foam: Show Graph</code> command.</p> <p>Your files, such as notes and documents, are shown as the nodes of the graph along with the tags defined in your notes. The edges of the graph represent either a link between two files or a file that contains a certain tag. A node in the graph will grow in size with the number of connections it has, representing stronger or more defined concepts and topics.</p>"},{"location":"features/graph-visualization/#graph-navigation","title":"Graph Navigation","text":"<p>With the Foam graph visualization you can:</p> <ul> <li>highlight a node by hovering on it, to quickly see how it's connected to the rest of your notes</li> <li>select one or more (by keeping <code>shift</code> pressed while selecting) nodes by clicking on them, to better understand the structure of your notes</li> <li>navigate to a note by clicking on it's node while pressing <code>ctrl</code> or <code>cmd</code></li> <li>automatically center the graph on the currently edited note, to immediately see its connections</li> </ul>"},{"location":"features/graph-visualization/#filter-view","title":"Filter View","text":"<p>If you only wish to view certain types of notes or tags, or want to hide linked attachment nodes then you can apply filters to the graph.</p> <ul> <li>Open the graph view using the <code>Foam: Show Graph</code> command</li> <li>Click the button in the top right corner of the graph view that says \"Open Controls\"</li> <li>Expand the \"Filter By Type\" dropdown to view the selection of types that you can filter by</li> <li>Uncheck the checkbox for any type you want to hide</li> <li>The types displayed in this dropdown are defined by note-properties which includes Foam-standard types as well as custom types defined by you!</li> </ul> <p></p>"},{"location":"features/graph-visualization/#custom-graph-styles","title":"Custom Graph Styles","text":"<p>The Foam graph will use the current VS Code theme by default, but it's possible to customize it with the <code>foam.graph.style</code> setting.</p> <p></p> <p>A sample configuration object is provided below, you can provide as many or as little configuration as you wish:</p> <pre><code>\"foam.graph.style\": {\n    \"background\": \"#202020\",\n    \"fontSize\": 12,\n    \"lineColor\": \"#277da1\",\n    \"lineWidth\": 0.2,\n    \"particleWidth\": 1.0,\n    \"highlightedForeground\": \"#f9c74f\",\n    \"node\": {\n        \"note\": \"#277da1\",\n    }\n}\n</code></pre> <ul> <li><code>background</code> background color of the graph, adjust to increase contrast</li> <li><code>fontSize</code> size of the title font for each node</li> <li><code>lineColor</code> color of the edges between nodes in the graph</li> <li><code>lineWidth</code> thickness of the edges between nodes</li> <li><code>particleWidth</code> size of the particle animation showing link direction when highlighting a node</li> <li><code>highlightedForeground</code> color of highlighted nodes and edges when hovering over a node</li> <li>to style individual types of nodes jump to the next section: Style Nodes By Type</li> </ul>"},{"location":"features/graph-visualization/#style-nodes-by-type","title":"Style Nodes by Type","text":"<p>It is possible to customize the style of a node based on the <code>type</code> property in the YAML frontmatter of the corresponding document.</p> <p>There are a few default node types defined by Foam that are displayed in the graph:</p> <ul> <li><code>note</code> defines the color for regular nodes whose documents have not overridden the <code>type</code> property.</li> <li><code>placeholder</code> defines the color for links that don't match any existing note. This is a [[placeholder]] because no file with such name exists.</li> <li>see wikilinks for more info </li> <li><code>tag</code> defines the color for nodes representing #tags, allowing tags to be used as graph nodes similar to backlinks.</li> <li>see tags for more info</li> <li><code>feature</code> shows an example of how you can use note types to customize the graph. It defines the color for the notes of type <code>feature</code></li> <li>see note-properties for details</li> </ul> <p>For example the following <code>backlinking.md</code> note:</p> <pre><code>---\ntype: feature\n---\n# Backlinking\n\n...\n</code></pre> <p>And the following <code>settings.json</code>:</p> <pre><code>\"foam.graph.style\": {\n    \"background\": \"#202020\",\n    \"node\": {\n        \"note\": \"#277da1\",\n        \"placeholder\": \"#545454\",\n        \"tag\": \"#f9c74f\",\n        \"feature\": \"red\",\n    }\n}\n</code></pre> <p>Will result in the following graph:</p> <p></p>"},{"location":"features/including-notes/","title":"Including notes in a note","text":"<p>In some situations it might be useful to include the content of another note in your current note. Foam supports this displaying within the vscode environment. Note, this does not work out-of-the-box for your publishing solutions.</p>"},{"location":"features/including-notes/#including-a-note","title":"Including a note","text":"<p>Including a note can be done by adding an <code>!</code> before a wikilink definition. For example <code>![[wikilink]]</code>.</p>"},{"location":"features/including-notes/#custom-styling","title":"Custom styling","text":"<p>To modify how an embedded note looks and the scope of its content, see built-in-note-embedding-types</p> <p>For more fine-grained custom styling, see custom-markdown-preview-styles</p>"},{"location":"features/including-notes/#future-possibilities","title":"Future possibilities","text":"<p>Work on this feature is evolving and progressing. See the [[inclusion-of-notes]] proposal for the current discussion.</p>"},{"location":"features/link-reference-definitions/","title":"Link Reference Definitions","text":"<p>When you use <code>[wikilinks](&lt;./wikilinks.md&gt;)</code>, the foam-vscode extension can automatically generate Markdown Link Reference Definitions at the bottom of the file. This is not needed to navigate your workspace with foam-vscode, but is useful for files to remain compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support <code>[wikilinks](&lt;./wikilinks.md&gt;)</code>.</p>"},{"location":"features/link-reference-definitions/#example","title":"Example","text":"<p>The following example:</p> <pre><code>- [wikilinks](&lt;./wikilinks.md&gt;)\n- [[github-pages]]\n</code></pre> <p>...generates the following link reference definitions to the bottom of the file:</p> <pre><code>[wikilinks]: wikilinks \"Wikilinks\"\n[github-pages]: github-pages \"GitHub Pages\"\n</code></pre> <p>You can open the raw markdown to see them at the bottom of this file You can open the raw markdown to see them at the bottom of this file</p>"},{"location":"features/link-reference-definitions/#specification","title":"Specification","text":"<p>The three components of a link reference definition are <code>[link-label]: link-target \"Link Title\"</code></p> <ul> <li>link label: The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed <code>[[wikilink]]</code> notation</li> <li>link destination The target of the matched link</li> <li>By default we generate links without extension. This can be overridden, see Configuration below</li> <li>\"Link Title\" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)</li> </ul>"},{"location":"features/link-reference-definitions/#configuration","title":"Configuration","text":"<p>You can choose to generate link reference definitions with or without file extensions, depending on the target, or to disable the generation altogether. As a rule of thumb:</p> <ul> <li>Links with file extensions work better with standard markdown-based tools, such as GitHub web UI.</li> <li>Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation.</li> </ul> <p>By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions.</p> <p>You can override this setting in your Foam workspace's <code>settings.json</code>:</p> <ul> <li><code>\"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\"</code> (default)</li> <li><code>\"foam.edit.linkReferenceDefinitions\": \"withExtensions\"</code></li> <li><code>\"foam.edit.linkReferenceDefinitions\": \"off\"</code></li> </ul>"},{"location":"features/link-reference-definitions/#ignoring-files","title":"Ignoring files","text":"<p>Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them.</p> <p>There are three options for excluding files from your Foam project:</p> <ol> <li> <p><code>files.exclude</code> (from VSCode) will prevent the folder from showing in the file explorer.</p> <p>\"Configure glob patterns for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the Search: Exclude setting to define search-specific excludes.\"</p> </li> <li> <p><code>files.watcherExclude</code> (from VSCode) prevents VSCode from constantly monitoring files for changes.</p> <p>\"Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example <code>build/output</code> or <code>*.js</code>) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with <code>**/</code> or the full path and suffix with <code>/**</code> to match files within a path) to match properly (for example <code>**/build/output/**</code> or <code>/Users/name/workspaces/project/build/output/**</code>). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).\"</p> </li> <li> <p><code>foam.files.ignore</code> (from Foam) ignores files from being added to the Foam graph.</p> <p>\"Specifies the list of globs that will be ignored by Foam (e.g. they will not be considered when creating the graph). To ignore the all the content of a given folder, use <code>&lt;folderName&gt;/**/*</code>\" (requires reloading VSCode to take effect).</p> </li> </ol> <p>For instance, if you're using a local instance of Jekyll, you may find that it writes copies of each <code>.md</code> file into a <code>_site</code> directory, which may lead to Foam generating references to them instead of the original source notes.</p> <p>You can ignore the <code>_site</code> directory by adding any of the following settings to your <code>.vscode/settings.json</code> file:</p> <pre><code>  \"files.exclude\": {\n    \"**/_site\": true\n  },\n  \"files.watcherExclude\": {\n    \"**/_site\": true\n  },\n  \"foam.files.ignore\": [\n    \"_site/**/*\"\n  ]\n</code></pre> <p>After changing the setting in your workspace, you can run the workspace-janitor command to convert all existing definitions.</p> <p>See [[link-reference-definition-improvements]] for further discussion on current problems and potential solutions.</p>"},{"location":"features/note-properties/","title":"Note Properties","text":"<p>At the top of the file you can have a section where you define your properties. This section is known as the Front-Matter of the document and uses YAML formatting.</p> <p>Be aware that this YAML section needs to be at the very top of the file to be valid.</p> <p>For example, for this file, we have:</p> <pre><code>---\ntype: feature\nkeywords: hello world, bonjour\n---\n</code></pre> <p>This sets the <code>type</code> of this document to <code>feature</code> and sets three keywords for the document: <code>hello</code>, <code>world</code>, and <code>bonjour</code>. The YAML parser will treat both spaces and commas as the separators for these YAML properties. If you want to use multi-word values for these properties, you will need to combine the words with dashes or underscores (i.e. instead of <code>hello world</code>, use <code>hello_world</code> or <code>hello-world</code>).</p> <p>You can set as many custom properties for a document as you like, but there are a few special properties defined by Foam.</p>","tags":["hello","bonjour"]},{"location":"features/note-properties/#special-properties","title":"Special Properties","text":"<p>Some properties have special meaning for Foam:</p> Name Description <code>title</code> will assign the name to the note that you will see in the graph, regardless of the filename or the first heading (also see how to write-notes-in-foam) <code>type</code> can be used to style notes differently in the graph (also see graph-visualization). The default type for a document is <code>note</code> unless otherwise specified with this property. <code>tags</code> can be used to add tags to a note (see tags) <p>For example:</p> <pre><code>---\ntitle: \"Note Title\"\ntype: \"daily-note\"\ntags: daily, funny, planning\n\n---\n</code></pre>","tags":["hello","bonjour"]},{"location":"features/note-properties/#foam-template-properties","title":"Foam Template Properties","text":"<p>There also exists properties that are even more specific to Foam templates, see note-templates#Metadata for more info.</p>","tags":["hello","bonjour"]},{"location":"features/note-templates/","title":"Note Templates","text":"<p>Foam supports note templates which let you customize the starting content of your notes instead of always starting from an empty note.</p> <p>Note templates are <code>.md</code> files located in the special <code>.foam/templates</code> directory of your workspace.</p>"},{"location":"features/note-templates/#quickstart","title":"Quickstart","text":"<p>Create a template:</p> <ul> <li>Run the <code>Foam: Create New Template</code> command from the command palette</li> <li>OR manually create a regular <code>.md</code> file in the <code>.foam/templates</code> directory</li> </ul> <p></p> <p>Theme: Ayu Light</p> <p>To create a note from a template:</p> <ul> <li>Run the <code>Foam: Create New Note From Template</code> command and follow the instructions. Don't worry if you've not created a template yet! You'll be prompted to create a new template if none exist.</li> <li>OR run the <code>Foam: Create New Note</code> command, which uses the special default template (<code>.foam/templates/new-note.md</code>, if it exists)</li> </ul> <p></p> <p>Theme: Ayu Light</p>"},{"location":"features/note-templates/#special-templates","title":"Special templates","text":""},{"location":"features/note-templates/#default-template","title":"Default template","text":"<p>The <code>.foam/templates/new-note.md</code> template is special in that it is the template that will be used by the <code>Foam: Create New Note</code> command. Customize this template to contain content that you want included every time you create a note. To begin it is recommended to define the YAML Front-Matter of the template similar to the following:</p> <pre><code>---\ntype: basic-note\n---\n</code></pre>"},{"location":"features/note-templates/#default-daily-note-template","title":"Default daily note template","text":"<p>The <code>.foam/templates/daily-note.md</code> template is special in that it is the template that will be used when creating daily notes (e.g. by using <code>Foam: Open Daily Note</code>). Customize this template to contain content that you want included every time you create a daily note. To begin it is recommended to define the YAML Front-Matter of the template similar to the following:</p> <pre><code>---\ntype: daily-note\n---\n</code></pre>"},{"location":"features/note-templates/#variables","title":"Variables","text":"<p>Templates can use all the variables available in VS Code Snippets.</p> <p>In addition, you can also use variables provided by Foam:</p> Name Description <code>FOAM_SELECTED_TEXT</code> Foam will fill it with selected text when creating a new note, if any text is selected. Selected text will be replaced with a wikilink to the new <code>FOAM_TITLE</code> The title of the note. If used, Foam will prompt you to enter a title for the note. <code>FOAM_TITLE_SAFE</code> The title of the note in a file system safe format. If used, Foam will prompt you to enter a title for the note unless <code>FOAM_TITLE</code> has already caused the prompt. <code>FOAM_SLUG</code> The sluggified title of the note (using the default github slug method). If used, Foam will prompt you to enter a title for the note unless <code>FOAM_TITLE</code> has already caused the prompt. <code>FOAM_DATE_*</code> <code>FOAM_DATE_YEAR</code>, <code>FOAM_DATE_MONTH</code>, <code>FOAM_DATE_WEEK</code> etc. Foam-specific versions of VS Code's datetime snippet variables. Prefer these versions over VS Code's."},{"location":"features/note-templates/#foam_date_-variables","title":"<code>FOAM_DATE_*</code> variables","text":"<p>Foam defines its own set of datetime variables that have a similar behaviour as VS Code's datetime snippet variables.</p> <p>For example, <code>FOAM_DATE_YEAR</code> has the same behaviour as VS Code's <code>CURRENT_YEAR</code>, <code>FOAM_DATE_SECONDS_UNIX</code> has the same behaviour as <code>CURRENT_SECONDS_UNIX</code>, etc.</p> <p>By default, prefer using the <code>FOAM_DATE_</code> versions. The datetime used to compute the values will be the same for both <code>FOAM_DATE_</code> and VS Code's variables, with the exception of the creation notes using the daily note template.</p> <p>For more nitty-gritty details about the supported date formats, see here.</p>"},{"location":"features/note-templates/#relative-daily-notes","title":"Relative daily notes","text":"<p>When referring to daily notes, you can use the relative snippets (<code>/+1d</code>, <code>/tomorrow</code>, etc.). In these cases, the new notes will be created with the daily note template, but the datetime used should be the relative datetime, not the current datetime. By using the <code>FOAM_DATE_</code> versions of the variables, the correct relative date will populate the variables, instead of the current datetime.</p> <p>For example, given this daily note template (<code>.foam/templates/daily-note.md</code>):</p> <pre><code># $FOAM_DATE_YEAR-$FOAM_DATE_MONTH-$FOAM_DATE_DATE\n\n## Here's what I'm going to do today\n\n* Thing 1\n* Thing 2\n</code></pre> <p>When the <code>/tomorrow</code> snippet is used, <code>FOAM_DATE_</code> variables will be populated with tomorrow's date, as expected. If instead you were to use the VS Code versions of these variables, they would be populated with today's date, not tomorrow's, causing unexpected behaviour.</p> <p>When creating notes in any other scenario, the <code>FOAM_DATE_</code> values are computed using the same datetime as the VS Code ones, so the <code>FOAM_DATE_</code> versions can be used in all scenarios by default.</p>"},{"location":"features/note-templates/#metadata","title":"Metadata","text":"<p>Templates can also contain metadata about the templates themselves. The metadata is defined in YAML \"Frontmatter\" blocks within the templates.</p> Name Description <code>filepath</code> The filepath to use when creating the new note. If the filepath is a relative filepath, it is relative to the current workspace. <code>name</code> A human readable name to show in the template picker. <code>description</code> A human readable description to show in the template picker. <p>Foam-specific variables (e.g. <code>$FOAM_TITLE</code>) can be used within template metadata. However, VS Code snippet variables are (currently) not supported.</p>"},{"location":"features/note-templates/#filepath-attribute","title":"<code>filepath</code> attribute","text":"<p>The <code>filepath</code> metadata attribute allows you to define a relative or absolute filepath to use when creating a note using the template. If the filepath is a relative filepath, it is relative to the current workspace.</p>"},{"location":"features/note-templates/#example-of-relative-filepath","title":"Example of relative <code>filepath</code>","text":"<p>For example, <code>filepath</code> can be used to customize <code>.foam/templates/new-note.md</code>, overriding the default <code>Foam: Create New Note</code> behaviour of opening the file in the same directory as the active file:</p> <pre><code>---\n# This will create the note in the \"journal\" subdirectory of the current workspace,\n# regardless of which file is the active file.\nfoam_template:\n  filepath: 'journal/$FOAM_TITLE.md'\n---\n</code></pre>"},{"location":"features/note-templates/#example-of-absolute-filepath","title":"Example of absolute <code>filepath</code>","text":"<p><code>filepath</code> can be an absolute filepath, so that the notes get created in the same location, regardless of which file or workspace the editor currently has open. The format of an absolute filepath may vary depending on the filesystem used.</p> <pre><code>---\nfoam_template:\n  # Unix / MacOS filesystems\n  filepath: '/Users/john.smith/foam/journal/$FOAM_TITLE.md'\n\n  # Windows filesystems\n  filepath: 'C:\\Users\\john.smith\\Documents\\foam\\journal\\$FOAM_TITLE.md'\n---\n</code></pre>"},{"location":"features/note-templates/#example-of-date-based-filepath","title":"Example of date-based <code>filepath</code>","text":"<p>It is possible to vary the <code>filepath</code> value based on the current date using the <code>FOAM_DATE_*</code> variables. This is especially useful for the daily-notes template if you wish to organize by years, months, etc. Below is an example of a daily-note template metadata section that will create new daily notes under the <code>journal/YEAR/MONTH-MONTH_NAME/</code> filepath. For example, when a note is created on November 15, 2022, a new file will be created at <code>C:\\Users\\foam_user\\foam_notes\\journal\\2022\\11-Nov\\2022-11-15-daily-note.md</code>. This method also respects the creation of daily notes relative to the current date (i.e. <code>/+1d</code>).</p> <pre><code>---\ntype: daily-note\nfoam_template:\n    description: Daily Note for $FOAM_TITLE\n    filepath: \"C:\\\\Users\\\\foam_user\\\\foam_notes\\\\journal\\\\$FOAM_DATE_YEAR\\\\$FOAM_DATE_MONTH-$FOAM_DATE_MONTH_NAME_SHORT\\\\$FOAM_DATE_YEAR-$FOAM_DATE_MONTH-$FOAM_DATE_DATE-daily-note.md\"\n---\n# $FOAM_DATE_YEAR-$FOAM_DATE_MONTH-$FOAM_DATE_DATE Daily Notes\n</code></pre> <p>Note: this method requires the use of absolute file paths, and in this example is using Windows path conventions. This method will also override any filename formatting defined in <code>.vscode/settings.json</code></p>"},{"location":"features/note-templates/#name-and-description-attributes","title":"<code>name</code> and <code>description</code> attributes","text":"<p>These attributes provide a human readable name and description to be shown in the template picker (e.g. When a user uses the <code>Foam: Create New Note From Template</code> command):</p> <p></p>"},{"location":"features/note-templates/#adding-template-metadata-to-an-existing-yaml-frontmatter-block","title":"Adding template metadata to an existing YAML Frontmatter block","text":"<p>If your template already has a YAML Frontmatter block, you can add the Foam template metadata to it.</p>"},{"location":"features/note-templates/#limitations","title":"Limitations","text":"<p>Foam only supports adding the template metadata to YAML Frontmatter blocks. If the existing Frontmatter block uses some other format (e.g. JSON), you will have to add the template metadata to its own YAML Frontmatter block.</p> <p>Further, the template metadata must be provided as a YAML block mapping, with the attributes placed on the lines immediately following the <code>foam_template</code> line:</p> <pre><code>---\nexisting_frontmatter: \"Existing Frontmatter block\"\nfoam_template: # this is a YAML \"Block\" mapping (\"Flow\" mappings aren't supported)\n  name: My Note Template # Attributes must be on the lines immediately following `foam_template`\n  description: This is my note template\n  filepath: `journal/$FOAM_TITLE.md`\n---\nThis is the rest of the template\n</code></pre> <p>Due to the technical limitations of parsing the complex YAML format, unless the metadata is provided this specific form, Foam is unable to correctly remove the template metadata before creating the resulting note.</p> <p>If this limitation proves inconvenient to you, please let us know. We may be able to extend our parsing capabilities to cover your use case. In the meantime, you can add the template metadata without this limitation by providing it in its own YAML Frontmatter block.</p>"},{"location":"features/note-templates/#adding-template-metadata-to-its-own-yaml-frontmatter-block","title":"Adding template metadata to its own YAML Frontmatter block","text":"<p>You can add the template metadata to its own YAML Frontmatter block at the start of the template:</p> <pre><code>---\nfoam_template:\n  name: My Note Template\n  description: This is my note template\n  filepath: 'journal/$FOAM_TITLE.md'\n---\nThis is the rest of the template\n</code></pre> <p>If the note already has a Frontmatter block, a Foam-specific Frontmatter block can be added to the start of the template. The Foam-specific Frontmatter block must always be placed at the very beginning of the file, and only whitespace can separate the two Frontmatter blocks.</p> <pre><code>---\nfoam_template:\n  name: My Note Template\n  description: This is my note template\n  filepath: 'journal/$FOAM_TITLE.md'\n---\n\n---\nexisting_frontmatter: \"Existing Frontmatter block\"\n---\nThis is the rest of the template\n</code></pre>"},{"location":"features/paste-images-from-clipboard/","title":"Paste Images from Clipboard","text":"<p>By installing the vscode-paste-image extension, you can paste an image from the clipboard with <code>cmd+alt+v</code>.</p> <p>Images are automatically copied to the <code>/attachments</code> folder and a reference is added in the file where you pasted them.</p> <p>A prompt will ask you to confirm the name of the image, to disable it set <code>\"pasteImage.showFilePathConfirmInputBox\": false,</code> in the settings.</p> <p>To change the location where the image is created, change the <code>pasteImage.path</code> property, e.g.:</p> <ul> <li><code>${currentFileDir}</code>: save the image next to the file</li> <li><code>${currentFileDir}/images</code>: create an <code>images</code> directory next to the file and save the image there</li> </ul>"},{"location":"features/resource-filters/","title":"Resource Filters","text":"<p>Resource filters can be passed to some Foam commands to limit their scope.</p> <p>A filter supports the following parameters:</p> <ul> <li><code>tag</code>: include a resource if it has the given tag (e.g. <code>{\"tag\": \"#research\"}</code>)</li> <li><code>type</code>: include a resource if it is of the given type (e.g. <code>{\"type\": \"daily-note\"}</code>)</li> <li><code>path</code>: include a resource if its path matches the given regex (e.g. <code>{\"path\": \"/projects/*\"}</code>). Note that this parameter supports regex and not globs.</li> <li><code>expression</code>: include a resource if it makes the given expression <code>true</code>, where <code>resource</code> represents the resource being evaluated (e.g. <code>{\"expression\": \"resource.type ==='weekly-note'\"}</code>)</li> <li><code>title</code>: include a resource if the title matches the given regex (e.g. <code>{\"title\": \"Team meeting:*\"}</code>)</li> </ul> <p>A filter also supports some logical operators:</p> <ul> <li><code>and</code>: include a resource if it matches all the sub-parameters (e.g <code>{\"and\": [{\"tag\": \"#research\"}, {\"title\": \"Paper *\"}]}</code>)</li> <li><code>or</code>: include a resource if it matches any of the sub-parameters (e.g <code>{\"or\": [{\"tag\": \"#research\"}, {\"title\": \"Paper *\"}]}</code>)</li> <li><code>not</code>: invert the result of the nested filter (e.g. <code>{\"not\": {\"type\": \"daily-note\"}}</code>)</li> </ul> <p>Here is an example of a complex filter, for example to show the Foam graph only of a subset of the workspace:</p> <pre><code>{\n  \"key\": \"alt+f\",\n  \"command\": \"foam-vscode.show-graph\",\n  \"args\": {\n    \"filter\": {\n      \"and\": [\n        {\n          \"or\": [\n            { \"type\": 'daily-note' },\n            { \"type\": 'weekly-note' },\n            { \"path\": '/projects/*' },\n          ],\n          \"not\": {\n            { \"tag\": '#b' },\n          },\n        },\n      ],\n    }\n  }\n}\n</code></pre>"},{"location":"features/spell-checking/","title":"Spell Checking","text":"<p>There are many spell checking extensions for VS Code.</p> <p>The most popular spell checker for VS Code is Code Spell Checker.</p> <p>Another one of our favorites is LTeX, which is a bit heavier but offers some extra functionality.</p> <p>Another popular one is Spellright, but be mindful that there have been reports of incompatibility with the <code>vscode-markdown</code> extension (see https://github.com/foambubble/foam/issues/1068).</p>"},{"location":"features/tags/","title":"Tags","text":"<p>You can add tags to your notes to categorize or link notes together.</p>"},{"location":"features/tags/#creating-a-tag","title":"Creating a tag","text":"<p>There are two ways of creating a tag:</p> <ul> <li>Adding a <code>#tag</code> anywhere in the text of the note, for example: #my-tag1</li> <li>Using the <code>tags: tag1, tag2</code> yaml frontmatter note property. Notice <code>my-tag1</code> and <code>my-tag2</code> tags which are added to this document this way.</li> </ul> <p>Tags can also be hierarchical, so you can have <code>#parent/child</code> such as #my-tag3/info.</p>"},{"location":"features/tags/#tag-completion","title":"Tag completion","text":"<p>Typing the <code>#</code> character will launch VS Code's \"Intellisense.\" This provider will show a list of possible tags that match the character. If you are editing in the frontmatter note property, you can invoke tag completion on the <code>tags:</code> line by either typing the <code>#</code> character, or using the \"trigger suggest\" keybinding (usually <code>ctrl+space</code>). If the <code>#</code> is used in the frontmatter, it will be removed when the tag is inserted.</p>"},{"location":"features/tags/#using-tag-explorer","title":"Using Tag Explorer","text":"<p>It's possible to navigate tags via the Tag Explorer panel. Expand the Tag Explorer view in the left side bar which will list all the tags found in current Foam environment. Then, each level of tags can be expanded until the options to search by tag and a list of all files containing a particular tag are shown.</p> <p>Tags can also be visualized in the Foam Graph Explorer. See graph-visualization for more info including how to change the color of nodes representing tags.</p>"},{"location":"features/tags/#styling-tags","title":"Styling tags","text":"<p>It is possible to customize the way that tags look in the Markdown Preview panel that renders your Foam notes. This requires some knowledge of the CSS language, which is used to customize the styles of web technologies such as VSCode. A cursory introduction to CSS can be found here.</p> <ol> <li>Create a CSS file within your Foam project, for example in <code>.foam/css/custom-tag-style.css</code> or .vscode/custom-tag-style.css</li> <li>Add CSS code that targets the <code>.foam-tag</code> class</li> <li>Add a rule for each CSS property you would like applied to your tags.</li> <li>Open the <code>.vscode/settings.json</code> file (or the Settings browser with <code>ctrl+,</code>)</li> <li>Add the path to your new stylesheet to the <code>markdown.styles</code> setting.</li> </ol> <p>Note: the file path for the stylesheet will be relative to the currently open folder in the workspace when changing this setting for the current workspace. If changing this setting for the user, then the file path will be relative to your global VSCode settings.</p> <p>The end result will be a CSS file that looks similar to the content below. Now you can make your tags standout in your note previews.</p> <pre><code>.foam-tag{\n  color:#ffffff;\n  background-color: #000000;\n}\n</code></pre> <p></p>"},{"location":"features/tags/#using-backlinks-in-place-of-tags","title":"Using backlinks in place of tags","text":"<p>Given the power of backlinks, some people prefer to use them as tags. For example you can tag your notes about books with [[book]].</p>"},{"location":"features/wikilinks/","title":"Wikilinks","text":"<p>Wikilinks are the internal links that connect the files in your knowledge base. (Also called <code>[[MediaWiki]]</code> links).</p>"},{"location":"features/wikilinks/#creating-and-navigating-wikilinks","title":"Creating and navigating wikilinks","text":"<p>To create a wikilink, type <code>[[</code> and then start typing the name of another note in your repo. Once the desired note is selected press the <code>tab</code> key to autocomplete it. For example: [[graph-visualization]].</p> <p><code>Cmd</code> + <code>Click</code> ( <code>Ctrl</code> + <code>Click</code> on Windows ) on wikilink to navigate to that note (<code>F12</code> also works while your cursor is on the wikilink). If the file doesn't exist it will be created in your workspace based on your default note-templates settings.</p>"},{"location":"features/wikilinks/#placeholders","title":"Placeholders","text":"<p>You can also create a [[placeholder]].  A placeholder is a wikilink that doesn't have a target file and a link to a placeholder is styled differently so you can easily tell them apart. They can still be helpful to highlight connections.</p> <p>Open the graph with <code>Foam: Show Graph</code> command, and look at the placeholder node.</p> <p>Remember, with <code>CTRL/CMD+click</code> on a wikilink you can navigate to the note, or create it (if the link is a placeholder).</p>"},{"location":"features/wikilinks/#support-for-sections","title":"Support for sections","text":"<p>Foam supports autocompletion, navigation, embedding and diagnostics for note sections. Just use the standard wiki syntax of <code>[[resource#Section Title]]</code>.  - If it's an external file, <code>[your link will need the filename](other-file.md#that-section-I-want-to-link-to)</code>, but - if it's an anchor within the same document, <code>[you just need an octothorpe and the section name](#that-section-above)</code>. - Doesn't matter what heading-level the anchor is; whether you're linking to an <code>H1</code> like <code># MEN WALK ON MOON</code> or an <code>H2</code> like <code>## Astronauts Land on Plain</code>, the link syntax uses a single octothorpe: <code>[Walk!](#men-walk-on-moon)</code> and <code>[Land!](#astronauts-land-on-plain-collect-rocks-plant-flag)</code>. Autocomplete is your friend here.</p>"},{"location":"features/wikilinks/#markdown-compatibility","title":"Markdown compatibility","text":"<p>The Foam for VSCode extension automatically generates link-reference-definitions at the bottom of the file to make wikilinks compatible with other Markdown tools and parsers.</p>"},{"location":"features/wikilinks/#read-more","title":"Read more","text":"<ul> <li>[[foam-file-format]]</li> <li>note-templates</li> <li>See [[link-reference-definition-improvements]] for further discussion on current problems and potential solutions.</li> </ul>"},{"location":"getting-started/creating-new-notes/","title":"Creating New Notes","text":"<ul> <li>Write out a new <code>[[wikilink]]</code> and <code>Cmd</code> + <code>Click</code> to create a new file and enter it.</li> <li>For keyboard navigation, use the 'Follow Definition' key <code>F12</code> (or remap the 'editor.action.revealDefinition' key binding to something more ergonomic)</li> <li><code>Cmd</code> + <code>Shift</code> + <code>P</code> (<code>Ctrl</code> + <code>Shift</code> + <code>P</code> for Windows), execute <code>Foam: Create Note</code> and enter a Title Case Name to create <code>Title Case Name.md</code></li> <li>Add a keyboard binding to make creating new notes easier. See commands for more info on this.</li> <li>The note-templates used by this command can be customized.</li> <li>You shouldn't worry too much about categorizing your notes. You can always search-for-notes, and explore them using the graph-visualization.</li> </ul>"},{"location":"getting-started/get-started-with-vscode/","title":"Getting started with VS Code","text":"<p>VS Code is a powerful text editor, hidden behind a simple interface.</p> <p>VS Code supports various keyboard shortcuts, the most important for us are:</p> Shortcut Action <code>cmd+N</code> create a new file <code>cmd+S</code> save the current file <code>cmd+O</code> open a file <code>cmd+P</code> use quickpick to open a file <code>cmd+shift+P</code> invoke a command (see below) <p>For more information, see the VS Code keyboard cheat sheets, where you can also see how to customize your keybindings.</p>"},{"location":"getting-started/get-started-with-vscode/#commands","title":"Commands","text":"<p>Commands make VS Code extremely powerful.</p> <p>To invoke a command, press <code>cmd+shift+P</code> and select the command you want to execute. For example, to see the Foam graph:</p> <ul> <li>press <code>cmd+shift+P</code></li> <li>start typing <code>show graph</code></li> <li>select the <code>Foam: Show Graph</code> command</li> </ul> <p>And watch the magic unfold.</p> <p>For more information on commands, see commands on the VS Code site.</p> <p>If you want to learn more about VS Code, check out their website.</p>"},{"location":"getting-started/get-started-with-vscode/#panels","title":"Panels","text":"<p>You can see a few panels on the left, including:</p> <ul> <li><code>Outline</code>: this panel shows you the structure of the file based on the headings</li> <li><code>Tag Explorer</code>: This shows you the tags in your workspace, see tags for more information on tags</li> </ul>"},{"location":"getting-started/get-started-with-vscode/#settings","title":"Settings","text":"<p>To view or change the settings in VS Code, press <code>cmd+,</code> on Mac and <code>ctrl+,</code> on Windows/Linux.</p>"},{"location":"getting-started/keyboard-shortcuts/","title":"Keyboard Shortcuts","text":"<p>Here are some keyboard shortcuts you'll love when editing your notes.</p> <p>This works best if you can see the result in the preview panel, run the <code>Markdown: Open Preview to the Side</code> command.</p> <p>You can use either the name or the id to find each shortcut in the settings (File &gt; Preferences &gt; Keyboard Shortcuts) and find out what it is bound to on your system and change it according to your liking.</p> Shortcut Name ID Extension Use <code>alt+c</code> - markdown.extension.checkTaskList Markdown All in One Toggle TODO items. <code>cmd+b</code> - markdown.extension.editing.toggleBold Markdown All in One Make selection bold. <code>cmd+i</code> - markdown.extension.editing.toggleItalic Markdown All in One Make selection italic. <code>ctrl+shift+f</code> Format Document editor.action.formatDocument Base Format tables <code>cmd+shift+f</code> Find files workbench.action.findInFiles Base Search in workspace. <code>cmd+shift+e</code> Show Explorer workbench.view.explorer Base Show the file explorer. <code>cmd+alt+v</code> Paste Image extension.pasteImage Paste Image Paste an image from your clipboard."},{"location":"getting-started/recommended-extensions/","title":"Recommended Extensions","text":"<p>These extensions defined in <code>.vscode/extensions.json</code> are automatically installed when you accept the workspace's recommended extensions.</p> <p>This list is subject to change.</p> <ul> <li>Foam for VSCode (alpha)</li> <li>Markdown All In One</li> <li>Prettier</li> </ul>"},{"location":"getting-started/recommended-extensions/#extensions-for-additional-features","title":"Extensions For Additional Features","text":"<p>These extensions are not defined in <code>.vscode/extensions.json</code>, but have been used by others and shown to play nice with Foam.</p> <ul> <li>Emojisense</li> <li>Markdown Emoji (adds <code>:smile:</code> syntax, works with emojisense to provide autocomplete for this syntax)</li> <li>Markdown Preview Mermaid Support</li> <li>Mermaid Markdown Syntax Highlighting</li> <li>Excalidraw whiteboard and sketching tool integration</li> <li>VSCode PDF Viewing</li> <li>Project Manager (to quickly switch between projects)</li> <li>Markdown Extended (with <code>kbd</code> option disabled, <code>kbd</code> turns wikilinks into non-clickable buttons)</li> <li>GitDoc (easy version management via git auto commits)</li> <li>Markdown Footnotes (Adds [^footnote] syntax support to VS Code's built-in markdown preview)</li> <li>Todo Tree (Searches workspace for TODO and related comments and summarizes those lines in vs-code gutter)</li> </ul>"},{"location":"getting-started/sync-notes-with-source-control/","title":"Sync notes with source control","text":"<p>Source control is a way to precicely manage the history and content of a directory of files. Often used for program code, this feature is very useful for note taking as well.</p> <p>There are (too) many ways to commit your changes to source control:</p> <ul> <li>Using VS Code's own git integration</li> <li>The quick and easy way is to use the <code>Git: Commit All</code> command after editing files. The default Foam workspace settings will stage &amp; sync all of your changes to the remote:</li> <li>Using GitDoc for automatic-git-syncing</li> <li>Whatever way you like to do it (CLI?)</li> </ul>"},{"location":"getting-started/write-notes-in-foam/","title":"Writing Notes","text":"<p>Notes are simple text files with some extra flavor, in the shape of Markdown syntax and support for extra properties (see note-properties).</p>"},{"location":"getting-started/write-notes-in-foam/#foam-syntax","title":"Foam Syntax","text":"<p>Foam uses standard Markdown, with a few added twists:</p> <ul> <li>the title of a note (e.g. in the graph-visualization) is given by precedence based on:</li> <li>the <code>title</code> property (see note-properties)</li> <li>the first <code># heading 1</code> of the file</li> <li>the file name</li> </ul>"},{"location":"getting-started/write-notes-in-foam/#markdown-syntax","title":"Markdown Syntax","text":"<p>With Markdown, we can style our notes in a simple way, while keeping the document a simple text file (the best way to future-proof your writings!).</p> <p>You can see the formatted output by running the <code>Markdown: Open Preview to the Side</code> command.</p> <p>Here is a high level overview of Markdown, for more information on the Markdown syntax see here.</p>"},{"location":"getting-started/write-notes-in-foam/#heading-1","title":"Heading 1","text":""},{"location":"getting-started/write-notes-in-foam/#heading-2","title":"Heading 2","text":""},{"location":"getting-started/write-notes-in-foam/#heading-3","title":"Heading 3","text":""},{"location":"getting-started/write-notes-in-foam/#heading-4","title":"Heading 4","text":""},{"location":"getting-started/write-notes-in-foam/#heading-5","title":"Heading 5","text":""},{"location":"getting-started/write-notes-in-foam/#heading-6","title":"Heading 6","text":"<p>This is a link to google.</p> <p>This is a wikilink (aka internal link) to note-properties.</p> <p>Here is an image: </p> <p>this is a blockquote it can span multiple lines</p> <ul> <li>list item</li> <li>list item</li> <li> <p>list item</p> </li> <li> <p>One</p> </li> <li>Two</li> <li>Three</li> </ul> <p>This text is in bold and this is italic.</p> <p>The following is a horizontal rule</p> <p>This is a table: | Column 1 | Column 2 | | -------- | -------- | | R1C1     | R1C2     | | R2C1     | R2C2     |</p> <p>You can <code>inline code</code> or</p> <pre><code>you can create\ncode blocks\n</code></pre>"},{"location":"publishing/generate-gatsby-site/","title":"Generate a site using Gatsby","text":""},{"location":"publishing/generate-gatsby-site/#using-foam-gatsby-template","title":"Using foam-gatsby-template","text":"<p>You can use foam-gatsby-template to generate a static site to host it online on GitHub or Vercel.</p>"},{"location":"publishing/generate-gatsby-site/#publishing-your-foam-to-github-pages","title":"Publishing your foam to GitHub pages","text":"<p>It comes configured with GitHub actions to auto deploy to GitHub pages when changes are pushed to your main branch.</p>"},{"location":"publishing/generate-gatsby-site/#publishing-your-foam-to-vercel","title":"Publishing your foam to Vercel","text":"<p>When you're ready to publish, run a local build.</p> <pre><code>cd _layouts\nnpm run build\n</code></pre> <p>Remove <code>public</code> from your .gitignore file then commit and push your public folder in <code>_layouts</code> to GitHub.</p> <p>Log into your Vercel account. (Create one if you don't have it already.)</p> <p>Import your project. Select <code>_layouts/public</code> as your root directory and click Continue. Then name your project and click Deploy.</p> <p>That's it!</p>"},{"location":"publishing/generate-gatsby-site/#using-foam-template-gatsby-kb","title":"Using foam-template-gatsby-kb","text":"<p>You can use another template foam-template-gatsby-kb, and host it on Vercel or Netlify.</p>"},{"location":"publishing/generate-gatsby-site/#using-foam-template-gatsby-theme-primer-wiki","title":"Using foam-template-gatsby-theme-primer-wiki","text":"<p>You can use another template foam-template-gatsby-theme-primer-wiki, (Demo), and host it on Github Pages, Vercel or Netlify.</p>"},{"location":"publishing/math-support-with-katex/","title":"Katex Math Rendering","text":"<p>Apart from using the method mentioned in math-support-with-mathjax, we can also use KaTeX to render our math equations in Foam. The caveat is: we can't rely on GitHub Pages to host and deploy our website anymore, because the plugin we'll be using to let Jekyll support KaTeX doesn't play well together with GitHub Pages.</p> <p>The alternative solution is to using publish-to-vercel for building and publishing our website, so before you start integrating KaTeX into your Foam project, please follow the instructions to host your Foam workspace on publish-to-vercel first.</p>"},{"location":"publishing/math-support-with-katex/#adding-required-plugins","title":"Adding required plugins","text":"<p>Add the plugin <code>jekyll-katex</code> to your Foam workspace's <code>_config.yml</code> and <code>Gemfile</code> if you haven't done so already. For detailed instructions, please refer to the <code>#Adding a _config.yml</code> and <code>#Adding a Gemfile</code> in publish-to-vercel.</p>"},{"location":"publishing/math-support-with-katex/#loading-katex-js-and-css","title":"Loading KaTeX JS and CSS","text":"<p>Because we are using KaTeX to render math, we will also need to import KaTeX's JS and CSS files from CDN. The official method to load these files is documented at: KaTeX/KaTeX#starter-template. In our case, we will need to add the following code snippet to our <code>_layouts/page.html</code>:</p> <pre><code>&lt;!-- _layouts/page.html --&gt;\n---\nlayout: default\n---\n\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\"&gt;\n\n&lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;\n&lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\" integrity=\"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\n&lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;\n&lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\" integrity=\"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\" crossorigin=\"anonymous\" onload=\"renderMathInElement(document.body);\"&gt;&lt;/script&gt;\n\n&lt;!-- ... --&gt;\n</code></pre>"},{"location":"publishing/math-support-with-katex/#adding-liquid-tags-to-wrap-page-content","title":"Adding liquid tags to wrap page content","text":"<p>The plugin <code>jekyll-katex</code> focuses on rendering:</p> <ul> <li>Single math equations wrapped inside <code>katex</code> liquid tags like {% raw %}<code>{% katex %} ... {% endkatex %}</code>.</li> <li>Or multiple math equations in paragraphs wrapped inside {% raw %}<code>{% katexmm %} ... {% endkatexmm %}</code>.</li> </ul> <p>In our case, we'll be using the latter tag to wrap our {% raw %}<code>{{ content }}</code>}. Wrap {% raw %<code>{{ content }}</code> in the liquid tags inside <code>_layouts/page.html</code> like so:</p> <pre><code>&lt;!-- _layouts/page.html --&gt;\n\n&lt;!-- ... --&gt;\n{% raw %}{% katexmm %} {{ content }} {% endkatexmm %}{% endraw %}\n&lt;!-- ... --&gt;\n</code></pre>"},{"location":"publishing/math-support-with-katex/#render-equations-in-foams-homepage-as-well","title":"Render equations in Foam's homepage as well","text":"<p>You may have noticed that we only made modifications to the template <code>_layouts/page.html</code>, which means that <code>_layouts/home.html</code> won't have KaTeX support. If you wan't to render math in Foam's home page, you'll need to make the same modifications to <code>_layouts/home.html</code> as well.</p> <p>Finally, if all goes well, then our site hosted on Vercel will support rendering math equations with KaTeX after committing these changes to GitHub. Here's a demo of the default template with KaTeX support: Foam Template with KaTeX support.</p>"},{"location":"publishing/math-support-with-mathjax/","title":"Math Support","text":"<p>Published Foam pages don't support math formulas by default. To enable this feature, you can add the following code snippet to the end of <code>_layouts/page.html</code>:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script type=\"text/x-mathjax-config\"&gt;\n    MathJax.Hub.Config({\n        tex2jax: {\n            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],\n            inlineMath: [['$','$']]\n        }\n    });\n&lt;/script&gt;\n</code></pre> <p>This approach uses the MathJax library to render anything delimited by <code>$</code> (customizable in the snippet above) pairs to inline math and <code>$$</code> to blocks of math (like a html div tag) using with the AMS-LaTeX dialect embedded within MathJax.</p> <p>Example of inline math using <code>$...$</code>:</p> <p><code>$e^{i \\pi}+1=0$</code>, becomes \\(e^{i \\pi}+1=0\\)</p> <p>Example of a math block using <code>$$...$$</code>:</p> <p><code>$$ f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} $$</code></p> <p>Becomes:</p> \\[ f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} \\]"},{"location":"publishing/math-support-with-mathjax/#alternative-approaches","title":"Alternative approaches","text":"<p>There are other dialects of LaTeX (instead of AMS), and other JavaScript rendering libraries you may want to use. In a future version of Foam, we may support KaTeX syntax out of the box, but at this time, these integrations are left as an exercise to the user.</p>"},{"location":"publishing/math-support-with-mathjax/#why-dont-my-math-expressions-work-on-my-foams-home-page","title":"Why don't my Math expressions work on my Foam's home page?","text":"<p>If you want the index page of your Foam site to render maths, you'll need to add that to <code>_layouts/home.html</code> as well, or change the layout of the index page to be \"page\" instead of \"home\" by putting this Front Matter on the top of your <code>readme.md/index.md</code>:</p> <pre><code>---\nlayout: page\n---\n\n# Your normal title here\n</code></pre> <p>Reference: How to support latex in github-pages</p>"},{"location":"publishing/publish-to-azure-devops-wiki/","title":"Publish to Azure DevOps Wiki","text":"<p>Publish your Foam workspace as an Azure DevOps wiki.</p> <p>Azure DevOps is Microsoft's collaboration software for software development teams, formerly known as Team Foundation Server (TFS) and Visual Studio Team Services. It is available as an on-premise or SaaS version. The following recipe was tested with the SaaS version, but should work the same way for the on-premise.</p> <p>The following recipe is written with the assumption that you already have an Azure DevOps project.</p>"},{"location":"publishing/publish-to-azure-devops-wiki/#setup-a-foam-workspace","title":"Setup a Foam workspace","text":"<ol> <li>Generate a Foam workspace using the foam-template project.</li> <li>Change the remote to a git repository in Azure DevOps (Repos -&gt; Import a Repository -&gt; Add Clone URL with Authentication), or copy all the files into a new Azure DevOps git repository.</li> <li>Define which document will be the wiki home page. To do that, create a file called <code>.order</code> in the Foam workspace root folder, with first line being the document filename without <code>.md</code> extension. For a project created from the Foam template, the file would look like this:</li> </ol> <pre><code>readme\n</code></pre> <ol> <li>Push the repository to remote in Azure DevOps.</li> </ol>"},{"location":"publishing/publish-to-azure-devops-wiki/#publish-repository-to-a-wiki","title":"Publish repository to a wiki","text":"<ol> <li>Navigate to your Azure DevOps project in a web browser.</li> <li>Choose Overview &gt; Wiki. If you don't have wikis for your project, choose Publish code as a wiki on welcome page.</li> <li>Choose repository with your Foam workspace, branch (usually <code>master</code> or <code>main</code>), folder (for workspace created from foam-template it is <code>/</code>), and wiki name, and press Publish.</li> </ol> <p>A published workspace looks like this:</p> <p></p> <p>There is default table of contents pane to the left of the wiki content. Here, you'll find a list of all directories that are present in your Foam workspace, and all wiki pages. Page names are derived from files names, and they are listed in alphabetical order. You may reorder pages by adding filenames without <code>.md</code> extension to <code>.order</code> file.</p> <p>Note that first entry in <code>.order</code> file defines wiki's home page.</p>"},{"location":"publishing/publish-to-azure-devops-wiki/#update-wiki","title":"Update wiki","text":"<p>While you are pushing changes to GitHub, you won't see the wiki updated if you don't add Azure as a remote. You can push to multiple repositories simultaneously.</p> <ol> <li>First open a terminal and check if Azure is added running: <code>git remote show origin</code>. If you don't see Azure add it in the output then follow these steps.</li> <li>Rename your current remote (most likely named origin) to a different name by running: <code>git remote rename origin main</code></li> <li>You can then add the remote for your second remote repository, in this case, Azure. e.g <code>git remote add azure https://&lt;YOUR_ID&gt;@dev.azure.com/&lt;YOUR_ID&gt;/foam-notes/_git/foam-notes</code>. You can get it from: Repos-&gt;Files-&gt;Clone and copy the URL.</li> <li>Now, you need to set up your origin remote to push to both of these. So run: <code>git config -e</code> and edit it.</li> <li>Add the <code>remote origin</code> section to the bottom of the file with the URLs from each remote repository you'd like to push to. You'll see something like that:</li> </ol> <p><code>bash  [core]   ...    (ignore this part)    ... [branch \"master\"]   remote = github   merge = refs/heads/master [remote \"github\"]   url = git@github.com:username/repo.git   fetch = +refs/heads/*:refs/remotes/github/* [remote \"azure\"]   url = https://&lt;YOUR_ID&gt;@dev.azure.com/&lt;YOUR_ID&gt;/foam-notes/_git/foam-notes   fetch = +refs/heads/*:refs/remotes/azure/* [remote \"origin\"]   url = git@github.com:username/repo.git   url = https://&lt;YOUR_ID&gt;@dev.azure.com/&lt;YOUR_ID&gt;/foam-notes/_git/foam-notes</code></p> <ol> <li>You can then push to both repositories by: <code>git push origin master</code> or a single one using: <code>git push github master</code> or <code>git push azure master</code></li> </ol> <p>For more information, read the Azure DevOps documentation.</p>"},{"location":"publishing/publish-to-github-pages/","title":"GitHub Pages","text":"<ol> <li>In VSCode workspace settings set <code>\"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\"</code></li> <li>Execute the \u201cFoam: Run Janitor\u201d command from the command palette.</li> <li>Turn GitHub Pages on in your repository settings.</li> <li>The default GitHub Pages template is called Primer. See Primer docs for how to customise html layouts and templates.</li> <li>GitHub Pages is built on Jekyll, so it supports things like permalinks, front matter metadata etc.</li> </ol>"},{"location":"publishing/publish-to-github-pages/#how-to-publish-locally","title":"How to publish locally","text":"<p>If you want to test your published foam, follow the instructions:</p> <ul> <li>https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll</li> <li>https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll</li> </ul> <p>Assuming you have installed ruby/jekyll and the rest:</p> <ul> <li><code>touch Gemfile</code></li> <li>open the file and paste the following:</li> </ul> <pre><code>source 'https://rubygems.org'\n\ngem \"github-pages\", \"VERSION\"\n</code></pre> <p>replacing <code>VERSION</code> with the latest from https://rubygems.org/gems/github-pages (e.g. <code>gem \"github-pages\", \"209\"</code>)</p> <ul> <li><code>bundle</code></li> <li><code>bundle exec jekyll 3.9.0 new .</code></li> <li>edit the <code>Gemfile</code> according to the instructions at Creating Your Site Point n.8</li> <li><code>bundle exec jekyll serve</code></li> </ul>"},{"location":"publishing/publish-to-github-pages/#other-templates","title":"Other templates","text":"<p>There are many other templates which also support publish your foam workspace to github pages</p> <ul> <li>gatsby-digital-garden</li> <li>repo</li> <li>demo-website</li> <li>foam-mkdocs-template</li> <li>repo</li> <li>demo-website</li> <li>foam-jekyll-template</li> <li>repo</li> <li>demo-website</li> </ul> <p>todo [[good-first-task]] Improve this documentation</p>"},{"location":"publishing/publish-to-github/","title":"Publish to GitHub","text":"<p>The standard foam-template is ready to be published to GitHub, and GitHub pages.</p>"},{"location":"publishing/publish-to-github/#enable-navigation-in-github","title":"Enable navigation in GitHub","text":"<p>To allow navigation from within the GitHub repo, make sure to generate the link references, by setting</p> <ul> <li><code>Foam \u203a Edit: Link Reference Definitions</code> -&gt; <code>withExtensions</code></li> </ul> <p>See link-reference-definitions for more information.</p>"},{"location":"publishing/publish-to-github/#customising-the-style","title":"Customising the style","text":"<p>You can edit <code>assets/css/style.scss</code> to change how published pages look.</p>"},{"location":"publishing/publish-to-gitlab-pages/","title":"GitLab Pages","text":"<p>You don't have to use GitHub to serve Foam pages. You can also use GitLab.</p> <p>Gitlab pages can be kept private for private repo, so that your notes are still private.</p>"},{"location":"publishing/publish-to-gitlab-pages/#setup-a-project","title":"Setup a project","text":""},{"location":"publishing/publish-to-gitlab-pages/#generate-the-directory-from-github","title":"Generate the directory from GitHub","text":"<p>Generate a solution using the Foam template.</p> <p>Change the remote to GitLab, or copy all the files into a new GitLab repo</p>"},{"location":"publishing/publish-to-gitlab-pages/#publishing-pages-with-gatsby","title":"Publishing pages with Gatsby","text":""},{"location":"publishing/publish-to-gitlab-pages/#setup-the-gatsby-config","title":"Setup the Gatsby config","text":"<p>Add a .gatsby-config.js file where:</p> <ul> <li><code>$REPO_NAME</code> correspond to the name of your gtlab repo.</li> <li><code>$USER_NAME</code> correspond to your gitlab username.</li> </ul> <pre><code>const path = require(\"path\");\nconst pathPrefix = `/$REPO_NAME`;\n\n// Change me\nconst siteMetadata = {\n  title: \"A title\",\n  shortName: \"A short name\",\n  description: \"\",\n  imageUrl: \"/graph-visualization.jpg\",\n  siteUrl: \"https://$USER_NAME.gitlab.io\",\n};\nmodule.exports = {\n  siteMetadata,\n  pathPrefix,\n  flags: {\n    DEV_SSR: true,\n  },\n  plugins: [\n    `gatsby-plugin-sharp`,\n    {\n      resolve: \"gatsby-theme-primer-wiki\",\n      options: {\n        defaultColorMode: \"night\",\n        icon: \"./path_to/logo.png\",\n        sidebarComponents: [\"tag\", \"category\"],\n        nav: [\n          {\n            title: \"Github\",\n            url: \"https://github.com/$USER_NAME/\",\n          },\n          {\n            title: \"Gitlab\",\n            url: \"https://gitlab.com/$USER_NAME/\",\n          },\n        ],\n        editUrl:\n          \"https://gitlab.com/$USER_NAME/$REPO_NAME/tree/main/\",\n      },\n    },\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        name: \"content\",\n        path: `${__dirname}`,\n        ignore: [`**/\\.*/**/*`],\n      },\n    },\n\n    {\n      resolve: \"gatsby-plugin-manifest\",\n      options: {\n        name: siteMetadata.title,\n        short_name: siteMetadata.shortName,\n        start_url: pathPrefix,\n        background_color: `#f7f0eb`,\n        display: `standalone`,\n        icon: path.resolve(__dirname, \"./path_to/logo.png\"),\n      },\n    },\n    {\n      resolve: `gatsby-plugin-sitemap`,\n    },\n    {\n      resolve: \"gatsby-plugin-robots-txt\",\n      options: {\n        host: siteMetadata.siteUrl,\n        sitemap: `${siteMetadata.siteUrl}/sitemap/sitemap-index.xml`,\n        policy: [{ userAgent: \"*\", allow: \"/\" }],\n      },\n    },\n  ],\n};\n</code></pre> <p>And a <code>package.json</code> file containing:</p> <pre><code>{\n    \"private\": true,\n    \"name\": \"wiki\",\n    \"version\": \"1.0.0\",\n    \"license\": \"MIT\",\n    \"scripts\": {\n        \"develop\": \"gatsby develop -H 0.0.0.0\",\n        \"start\": \"gatsby develop -H 0.0.0.0\",\n        \"build\": \"gatsby build\",\n        \"clean\": \"gatsby clean\",\n        \"serve\": \"gatsby serve\",\n        \"test\": \"echo test\"\n    },\n    \"dependencies\": {\n        \"@primer/react\": \"^34.1.0\",\n        \"@primer/css\": \"^17.5.0\",\n        \"foam-cli\": \"^0.11.0\",\n        \"gatsby\": \"^3.12.0\",\n        \"gatsby-plugin-manifest\": \"^3.12.0\",\n        \"gatsby-plugin-robots-txt\": \"^1.6.9\",\n        \"gatsby-plugin-sitemap\": \"^5.4.0\",\n        \"gatsby-source-filesystem\": \"^3.12.0\",\n        \"gatsby-theme-primer-wiki\": \"^1.14.5\",\n        \"react\": \"^17.0.2\",\n        \"react-dom\": \"^17.0.2\"\n    }\n}\n</code></pre> <p>The theme will be based on gatsby-theme-primer-wiki.</p> <p>To test the theme locally first run <code>yarn install</code> and then use <code>gatsby develop</code> to serve the website. See gatsby documentation for more details.</p>"},{"location":"publishing/publish-to-gitlab-pages/#set-up-the-ci-for-deployment","title":"Set-up the CI for deployment","text":"<p>Create a <code>.gitlab-ci.yml</code> file containing:</p> <pre><code># To contribute improvements to CI/CD templates, please follow the Development guide at:\n# https://docs.gitlab.com/ee/development/cicd/templates.html\n# This specific template is located at:\n# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Pages/Gatsby.gitlab-ci.yml\n\nimage: node:latest\n\nstages:\n  - deploy\n\npages:\n  stage: deploy\n  # This folder is cached between builds\n  # https://docs.gitlab.com/ee/ci/yaml/index.html#cache\n  cache:\n    paths:\n      - node_modules/\n      # Enables git-lab CI caching. Both .cache and public must be cached, otherwise builds will fail.\n      - .cache/\n      - public/\n  script:\n    - yarn install\n    - ./node_modules/.bin/gatsby build --prefix-paths\n  artifacts:\n    paths:\n      - public\n  rules:\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n</code></pre> <p>This pipeline will now serve your website on every push to the main branch of your project.</p>"},{"location":"publishing/publish-to-gitlab-pages/#publish-with-jekyll","title":"Publish with Jekyll","text":""},{"location":"publishing/publish-to-gitlab-pages/#add-a-_configyaml","title":"Add a _config.yaml","text":"<p>Add another file to the root directory (the one with <code>readme.md</code> in it) called <code>_config.yaml</code> (no extension)</p> <pre><code>title: My Awesome Foam Project\nbaseurl: \"\" # the subpath of your site, e.g. /blog\nurl: \"/\" # the base hostname &amp; protocol for your site\ntheme: jekyll-theme-minimal\nplugins:\n  - jekyll-optional-front-matter\noptional_front_matter:\n  remove_originals: true\ndefaults:\n  -\n    scope:\n      path: \"\" # we need to add this to properly render layouts\n    values:\n      layout: \"default\"\n</code></pre> <p>You can choose a theme if you want from places like Jekyll Themes</p>"},{"location":"publishing/publish-to-gitlab-pages/#add-a-gemlock-file","title":"Add a Gemlock file","text":"<p>Add another file to the root directory (the one with <code>readme.md</code> in it) called <code>Gemfile</code> (no extension)</p> <pre><code>source \"https://rubygems.org\"\n\ngem \"jekyll\"\ngem \"jekyll-theme-minimal\"\ngem \"jekyll-optional-front-matter\"\n</code></pre> <p>Commit the file and push it to gitlab.</p>"},{"location":"publishing/publish-to-gitlab-pages/#setup-cicd","title":"Setup CI/CD","text":"<ol> <li>From the project home in GitLab click <code>Set up CI/CD</code></li> <li>Choose <code>Jekyll</code> as your template from the template dropdown</li> <li>Click <code>commit</code></li> <li>Now when you go to CI / CD &gt; Pipelines, you should see the code running</li> </ol>"},{"location":"publishing/publish-to-gitlab-pages/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Could not locate Gemfile - You didn't follow the steps above to Add a Gemlock file</li> <li>Conversion error: Jekyll::Converters::Scss encountered an error while converting You need to reference a theme.</li> <li>Pages are running in CI/CD, but I only ever see <code>test</code>, and never deploy - Perhaps you've renamed the main branch (from master) - check the settings in <code>.gitlab-ci.yml</code> and ensure the deploy command is running to the branch you expect it to.</li> <li>I deployed, but my .msd files don't seem to be being converted into .html files - You need a gem that GitHub installs by default - check <code>gem \"jekyll-optional-front-matter\"</code> appears in the <code>Gemfile</code></li> </ul>"},{"location":"publishing/publish-to-netlify-with-eleventy/","title":"Publish to Netlify with Eleventy","text":"<p>You can use foam-eleventy-template to generate a static site with Eleventy, and host it online on Netlify.</p> <p>With this template you can</p> <ul> <li>Have control over what to publish and what to keep private</li> <li>Customize the styling of the site to your own liking</li> </ul>"},{"location":"publishing/publish-to-netlify-with-eleventy/#publishing-your-foam","title":"Publishing your foam","text":"<p>When you're ready to publish, import the GitHub repository you created with foam-eleventy-template into your Netlify account. (Create one if you don't have it already.)</p> <p>Once that's done, all you have to do is make changes to your workspace in VS Code and push them to the main branch on GitHub. Netlify will recognize the changes, deploy them automatically and give you a link where your Foam is published.</p> <p>That's it!</p> <p>You can now see it online and use that link to share it with your friends, so that they can see it too.</p>"},{"location":"publishing/publish-to-vercel/","title":"Publish to Vercel","text":"<p>This #recipe shows you how to deploy the default Foam website template to Vercel.</p> <p>Vercel is a static website hosting solution similar to GitHub Pages (see publish-to-github-pages).</p>"},{"location":"publishing/publish-to-vercel/#setting-up-the-project","title":"Setting up the project","text":""},{"location":"publishing/publish-to-vercel/#using-foams-template","title":"Using Foam's template","text":"<p>Generate a GitHub repository using the default Foam template, this will be the workspace that we will be deploying with Vercel. This workspace is a barebone Jekyll source website, which means we can customize and install plugins just like any other Jekyll websites.</p> <p>As we won't be using GitHub Pages, we will be adding a few configuration files in order to help Vercel pick up on how to build our site.</p>"},{"location":"publishing/publish-to-vercel/#adding-a-_configyml","title":"Adding a <code>_config.yml</code>","text":"<p>First, we'll need to add a <code>_config.yml</code> at the root directory. This is the Jekyll configuration file. In here, we will set the site's title, theme, repository and permalink options, and also tell Jekyll what plugins to use:</p> <pre><code># _config.yml\ntitle: Foam\n# All the plugins we will be installing now that we won't be using GitHub Pages\nplugins:\n  - jekyll-katex  # optional\n  - jekyll-default-layout\n  - jekyll-relative-links\n  - jekyll-readme-index\n  - jekyll-titles-from-headings\n  - jekyll-optional-front-matter\n# The default Jekyll theme we will be using\ntheme: jekyll-theme-primer\n# The GitHub repository that we are hosting our foam workspace from\nrepository: user/repo\n# Generate permalinks in format specified in: https://jekyllrb.com/docs/permalinks/#built-in-formats\npermalink: pretty\n</code></pre> <p>The <code>theme</code> specifies a theme for our deployed Jekyll website. The default GitHub Pages template is called Primer. See Primer docs for how to customise html layouts and templates. We can also choose a theme if you want from places like Jekyll Themes.</p> <p>The <code>plugins</code> specifies a list of Jekyll plugins that we will be installing in the next section. As we won't be using GitHub Pages, we'll need to install these plugins that GitHub Pages installs for us under the hood.</p> <p>If you want to use LaTeX rendered with KaTeX (which is what the plugin <code>jekyll-katex</code> does), you can specify it here. And yes, one of the benefits of deploying with Vercel is that we can use KaTeX to render LaTeX! More on: math-support-with-katex</p>"},{"location":"publishing/publish-to-vercel/#adding-a-gemfile","title":"Adding a <code>Gemfile</code>","text":"<p>Next up, we'll create another new file called <code>Gemfile</code> in the root directory. This is where we will let Vercel know what plugins to install when building our website.</p> <p>In our <code>Gemfile</code>, we need to specify our Ruby packages:</p> <pre><code># Gemfile\nsource \"https://rubygems.org\"\ngem \"jekyll\"\ngem \"kramdown-parser-gfm\"\ngem \"jekyll-theme-primer\"\ngem \"jekyll-optional-front-matter\"\ngem \"jekyll-default-layout\"\ngem \"jekyll-relative-links\"\ngem \"jekyll-readme-index\"\ngem \"jekyll-titles-from-headings\"\ngem \"jekyll-katex\"  # Optional, the package that enables KaTeX math rendering\n</code></pre>"},{"location":"publishing/publish-to-vercel/#enable-math-rendering-with-katex-optional","title":"Enable math rendering with KaTeX (optional)","text":"<p>Besides adding the plugin <code>jekyll-katex</code> in <code>_config.yml</code> and <code>Gemfile</code>, we'll also have to follow the guides in math-support-with-katex to let our site fully support using KaTeX to render math equations.</p>"},{"location":"publishing/publish-to-vercel/#committing-changes-to-github-repo","title":"Committing changes to GitHub repo","text":"<p>Finally, commit the newly created files to GitHub.</p>"},{"location":"publishing/publish-to-vercel/#importing-project-to-vercel","title":"Importing project to Vercel","text":"<p>First, import our foam workspace (GitHub repository) to Vercel with Vercel's Import Git Repository. Paste our GitHub repo's url and Vercel will automatically pull and analyze the tool we use to deploy our website. (In our case: Jekyll.)</p> <p>Next, select the folder to deploy from if prompted. If we are using the default template, then Vercel will default to the root directory of our Foam workspace.</p> <p>Finally, if all is successful, Vercel will show the detected framework: Jekyll. Press <code>Deploy</code> to proceed on publishing our project.</p> <p></p> <p>And now, Vercel will take care of building and rendering our foam workspace each time on push. Vercel will publish our site to <code>xxx.vercel.app</code>, we can also define a custom domain name for our Vercel website.</p>"},{"location":"publishing/publishing/","title":"Publishing pages","text":"<p>Foam pages can be published.</p> <p>TODO add publishing TOC</p>"},{"location":"publishing/publishing/#foam-site-generator","title":"Foam site generator?","text":"<p>Another case of the [[build-vs-assemble]] dilemma. We could provide a better publishing experience by building a bespoke static site generator (or a gatsby plugin) that's aware of Foam conventions (backlinks etc.)</p> <p>Eventually we should probably do it, as that would unlock a huge amount of power, but we should always strive to keep it optional.</p> <p>At a bare minimum, Foam repos should remain valid markdown, and should be publishable by any sufficiently complete markdown to html generation tools.</p> <p>Would be cool if Foam pages could be published. Some ideas here.</p> <ul> <li> Easymode: Make your GitHub public</li> <li> Static site generator integration, publish from GH actions to GitHub pages / Netlify etc!!!</li> <li> Add annotations to pages for setting visibility (many ways to do this)<ul> <li> Public by default, and <code>@private</code> annotations</li> <li> Private by default, and <code>@public</code> annotations</li> <li> Only public <code>/public</code> folder, just move a document there, no annotation needed</li> <li> More granular access control? Email someone a link with a hash? Testing</li> </ul> </li> </ul>"},{"location":"recipes/add-images-to-notes/","title":"Add images to your notes","text":"<p>This #recipe allows you to paste images on to your notes.</p> <p>VScode (since 1.79) now has the ability to paste images from the clipboard, or drag-and-drop image files, directly into markdown documents. The file will be created in the workspace, and a link generated in Markdown format. </p> <p>VSCode settings under <code>Markdown &gt; Copy Files</code> and <code>Markdown &gt; Editor &gt; Drop</code> can be used to configure where the files get placed in your workspace, how they're named, how conflicts with existing files are handled, and more.</p>"},{"location":"recipes/automatic-git-syncing/","title":"Automatically Sync with Git","text":"<p>With this #recipe you can regularly commit and push to git, to keep your repo in always synched. You can also easily manipulate the git history to reduce clutter.</p>"},{"location":"recipes/automatic-git-syncing/#required-extensions","title":"Required Extensions","text":"<ul> <li>GitDoc</li> </ul>"},{"location":"recipes/automatic-git-syncing/#instructions","title":"Instructions","text":"<p>Click on the extension link above to see how to use it.</p> <p>For Foam specific needs, you can add a comment here by following the [[contribution-guide]]</p>"},{"location":"recipes/automatic-git-syncing/#feedback-and-issues","title":"Feedback and issues","text":"<ul> <li>Feedback and issues with the extension should be reported to the authors themselves</li> <li>Feedback and issues with the integration of the extension in Foam can be reported in our issue tracker</li> </ul>"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/","title":"Automatically Expand URLs to Well-Titled Links","text":"<p>With this #recipe you can convert a link to a fully-formed Markdown link, using the page's title as a display name. Useful for citations and creating link collections.</p>"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#required-extensions","title":"Required Extensions","text":"<ul> <li>Markdown Link Expander (not included in template)</li> </ul> <p>Markdown Link Expander will scrape your URL's <code>&lt;title&gt;</code> tag to create a nice Markdown-style link.</p>"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#instructions","title":"Instructions","text":"<ol> <li>Highlight desired URL</li> <li><code>Cmd</code> + <code>Shift</code> + <code>P</code></li> <li><code>Expand URL to Markdown</code></li> <li>Profit</li> </ol> <p>Tip: If you paste a lot of links, give the action a custom key binding</p>"},{"location":"recipes/automatically-expand-urls-to-well-titled-links/#feedback-and-issues","title":"Feedback and issues","text":"<p>Have an idea for the extension? Feel free to share! \ud83c\udf89</p>"},{"location":"recipes/capture-notes-with-drafts-pro/","title":"Capture Notes With Drafts Pro","text":"<p>With this #recipe you can create notes on your iOS device, which will automatically be imported into Foam.</p>"},{"location":"recipes/capture-notes-with-drafts-pro/#context","title":"Context","text":"<ul> <li>You use Foam for VSCode to manage your notes</li> <li>You wish to adopt a practice such as A writing inbox for transient and incomplete notes</li> <li>You wish to use Drafts Pro to capture quick notes into your Foam notes from your iOS device</li> </ul>"},{"location":"recipes/capture-notes-with-drafts-pro/#other-tools","title":"Other tools","text":"<ul> <li>We assume you are familiar with how to use GitHub (if you are using Foam this is implicit)</li> <li>You have an iOS device with Drafts</li> <li>You have upgraded to Drafts Pro (needed to edit actions).</li> </ul>"},{"location":"recipes/capture-notes-with-drafts-pro/#instructions","title":"Instructions","text":"<ol> <li>Create a new action in Drafts</li> <li>Add a single step of type Script</li> <li>Edit the script adding the code from the block below</li> <li>Edit settings at the top of the script to suit your preferences</li> <li>Set other Action options in Drafts as you wish</li> <li>Save the Action</li> <li>In GitHub create a Personal Access Token and give it <code>repo</code> scope - make a note of the token</li> <li>In Drafts create a note</li> <li>Select the action you created in steps 1-6</li> <li>On the first run you will need to add the following information:<ol> <li>your GitHub username</li> <li>the repository name of your Foam repo</li> <li>the GitHub access token from step 7</li> <li>An author name</li> </ol> </li> <li>Check your GitHub repo for a commit</li> <li>If you are publishing your Foam to the web you may want to edit your publishing configuration to exclude inbox files - as publishing (and method) is a user choice that is beyond the scope of this recipe</li> </ol>"},{"location":"recipes/capture-notes-with-drafts-pro/#code-for-drafts-action","title":"Code for Drafts Action","text":"<pre><code>// adapted from https://forums.getdrafts.com/t/script-step-post-to-github-without-working-copy/3594\n// post to writing inbox in Foam digital garden\n\n/*\n * edit these lines to suit your preferences\n */\nconst inboxFolder = \"inbox/\";   // the folder in your Foam repo where notes are saved. MUST have trailing slash, except for root of repo use ''\nconst requiredTags = ['inbox']; // all documents will have these added in addition to tags from the Drafts app\nconst addLinkToInbox = true;    // true = created note will have link to [index](&lt;../index.md&gt;), false = no link\nconst addTimeStamp = true;      // true = add a note of capture date/time at foot of note\n\n/*\n * stop editing\n */\n\nconst credential = Credential.create(\"GitHub garden repo\", \"The repo name, and its credentials, hosting your Foam notes\");\ncredential.addTextField(\"username\", \"GitHub Username\");\ncredential.addTextField('repo', 'Repo name');\ncredential.addPasswordField(\"key\", \"GitHub personal access token\");\ncredential.addTextField('author', 'Author');\ncredential.authorize();\n\nconst githubKey = credential.getValue('key');\nconst githubUser = credential.getValue('username');\nconst repo = credential.getValue('repo');\nconst author = credential.getValue('author');\n\nconst http = HTTP.create(); // create HTTP object\nconst base = 'https://api.github.com';\n\n\nconst posttime = new Date();\nconst title = draft.title;\nconst txt = draft.processTemplate(\"[[line|3..]]\");\nconst mergedTags = [...draft.tags, ...requiredTags];\nconst slugbase = title.toLowerCase().replace(/\\s/g, \"-\");\n\nconst datestr = `${posttime.getFullYear()}-${pad(posttime.getMonth() + 1)}-${pad(posttime.getDate())}`;\nconst timestr = `${pad(posttime.getHours())}:${pad(posttime.getMinutes())}:00`;\nconst yr = `${posttime.getFullYear()}`;\nconst pdOffset = posttime.getTimezoneOffset();\nconst offsetChar = pdOffset &gt;= 0 ? '-' : '+';\nvar pdHours = Math.floor(pdOffset/60);\nconsole.log(pdHours);\npdHours = pdHours &gt;= 0 ? pdHours : pdHours * -1;\nconsole.log(pdHours);\nconst tzString = `${offsetChar}${pad(pdHours)}:00`;\nconst postdate = `${datestr}T${timestr}${tzString}`;\n\n\nconst slug = `${slugbase}`\nconst fn = `${slug}.md`;\nlet preamble = `# ${title} \\n\\n`;\n\nmergedTags.forEach(function(item,index){\n   preamble += `#${item} `;\n  }\n);\n\nif (addLinkToInbox) {\n    preamble += \"\\n\\n[[inbox]]\\n\";\n}\n\npreamble += \"\\n\\n\";\n\nvar doc = `${preamble}${txt}`;\n\nif (addTimeStamp){\n\n    doc += `\\n\\nCaptured: ${postdate}\\n`\n}\n\nconst options = {\n    url: `https://api.github.com/repos/${githubUser}/${repo}/contents/${inboxFolder}${fn}`,\n    method: 'PUT',\n    data: {\n        message: `Inbox from Drafts ${datestr}`,\n        content: Base64.encode(doc)\n    },\n    headers: {\n        'Authorization': `token ${githubKey}`\n    }\n};\n\nvar response = http.request(options);\n\nif (response.success) {\n    // yay\n} else {\n    console.log(response.statusCode);\n    console.log(response.error);\n}\n\nfunction pad(n) {\n    let str = String(n);\n    while (str.length &lt; 2) {\n        str = `0${str}`;\n    }\n    return str;\n}\n</code></pre>"},{"location":"recipes/capture-notes-with-shortcuts-and-github-actions/","title":"Capture Notes With Shortcuts and GitHub Actions","text":"<p>With this #recipe you can create notes on your iOS device, which will automatically be imported into Foam.</p>"},{"location":"recipes/capture-notes-with-shortcuts-and-github-actions/#context","title":"Context","text":"<ul> <li>You use Foam for VSCode to manage your notes</li> <li>You wish to adopt a practice such as A writing inbox for transient and incomplete notes</li> <li>You wish to use Shortcuts to capture quick notes into your Foam notes from your iOS device</li> </ul>"},{"location":"recipes/capture-notes-with-shortcuts-and-github-actions/#other-tools","title":"Other tools","text":"<ul> <li>We assume you are familiar with how to use GitHub (if you are using Foam this is implicit)</li> <li>You have an iOS device.</li> </ul>"},{"location":"recipes/capture-notes-with-shortcuts-and-github-actions/#instructions","title":"Instructions","text":"<ol> <li>Setup the <code>foam-capture-action</code> in your GitHub Repository, to be triggered by \"Workflow dispatch\" events.</li> </ol> <pre><code>name: Manually triggered workflow\non:\n  workflow_dispatch:\n    inputs:\n      data:\n        description: 'What information to put in the knowledge base.'\n        required: true\n\njobs:\n  store_data:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - uses: anglinb/foam-capture-action@main\n      with:\n        {% raw %}\n        capture: ${{ github.event.inputs.data }}\n        {% endraw %}\n    - run: |\n        git config --local user.email \"example@gmail.com\"\n        git config --local user.name \"Your name\"\n        git commit -m \"Captured from workflow trigger\" -a\n        git push -u origin master\n</code></pre> <ol> <li>In GitHub create a Personal Access Token and give it <code>repo</code> scope - make a note of the token</li> <li>Run this command to find your <code>workflow-id</code> to be used in the Shortcut.</li> </ol> <pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  -H \"Authorization: Bearer &lt;GITHUB_TOKEN&gt;\" \\\n    https://api.github.com/repos/&lt;owner&gt;/&lt;repository&gt;/actions/workflows\n</code></pre> <ol> <li>Copy this Shortcut to your iOS devices and edit the contents of the last step, <code>GetContentsOfURL</code></li> <li>Make sure you update the URL of the shortcut step with the <code>owner</code>, <code>repository</code>, <code>workflow-id</code> (from the previous step)</li> <li> <p>Make sure you update the headers of the shortcut step, replaceing <code>[GITHUB_TOKEN]</code> with your Personal Access Token (from step 2)</p> </li> <li> <p>Run the shortcut &amp; celebrate! \u2728 (You should see a GitHub Action run start and the text you entered show up in <code>inbox.md</code> in your repository.)</p> </li> </ol>"},{"location":"recipes/diagrams-in-markdown/","title":"Diagrams in Markdown","text":"<p>We have two alternative #recipe for displaying diagrams in markdown:</p> <ul> <li>Diagrams in Markdown</li> <li>Mermaid</li> <li>Draw.io<ul> <li>Using Draw.io</li> </ul> </li> </ul>"},{"location":"recipes/diagrams-in-markdown/#mermaid","title":"Mermaid","text":"<p>You can use Mermaid plugin to draw and preview diagrams in your content.</p>"},{"location":"recipes/diagrams-in-markdown/#drawio","title":"Draw.io","text":"<p>Draw.io extension allows you to create, edit, and display your diagrams without leaving Visual Studio Code. The <code>.drawio.svg</code> or <code>.drawio.png</code> files can be automatically embedded and displayed in published Foams, no export needed. FYI, the diagram below was made using Draw.io! You can check the diagram here.</p> <p></p>"},{"location":"recipes/diagrams-in-markdown/#using-drawio","title":"Using Draw.io","text":"<ol> <li>Install Draw.io VS Code extension.</li> <li>Create a new <code>*.drawio.svg</code> or <code>*.drawio.png</code> file.</li> <li>Start drawing your diagram. Once you done, save it.</li> <li>Embed the diagram file as you embedding the image file, for example: <code>![My Diagram](my-diagram.drawio.svg)</code></li> </ol>"},{"location":"recipes/how-to-write-recipes/","title":"How to Write Recipes","text":"<p>This is an example of how to structure a Recipe. The first paragraph or two should explain the purpose of the recipe succinctly, including why it's useful, if that's not obvious.</p> <p>Recipes are intended to document:</p> <ul> <li>How to use Foam's basic features</li> <li>Power user pro-tips</li> <li>Useful customisations of the default Foam environment</li> <li>Integrations with third party tools and extensions (should be listed below)</li> </ul>"},{"location":"recipes/how-to-write-recipes/#required-extensions","title":"Required Extensions","text":"<ul> <li>Hacker Typer (not really required for this recipe, just an example)</li> <li>Foam for VSCode (installed by default)</li> </ul> <p>The first section should be a bulleted list of extensions required to use this recipe. At a minimum, this section should list all additional, non-standard extensions.</p> <p>Ideally, you should also note which Foam recommended-extensions are responsible for providing this feature, so any issue reports can be directed to the correct repositories.</p> <p>When creating new recipes, if you don't know which extension does what, you can leave it out.</p>"},{"location":"recipes/how-to-write-recipes/#instructions","title":"Instructions","text":"<p>Here we describe how the extension should be used.</p> <p></p> <p>You may include a screenshot or GIF of the feature in action by uploading an image to the <code>assets/images</code> directory. Please try to keep GIFs as small as possible by recording them with a low frame rate.</p> <p>That's pretty much it!</p>"},{"location":"recipes/how-to-write-recipes/#how-to-contribute","title":"How to contribute","text":"<p>You can add recipes by creating a pull request to foambubble/foam on GitHub.</p> <p>Read more in our [[contribution-guide]].</p>"},{"location":"recipes/make-backlinks-more-prominent/","title":"Make Backlinks More Prominent","text":"<p>One of the most most common early feature requests in Foam is to make the Markdown Notes Backlinks Explorer more prominent.</p> <p>This #recipe shows you how to do that.</p> <p>At the moment, you can drag the explorer pane to your bottom pane, and either show it side by side with another pane, or have take the full width of the editor:</p> <p></p> <p>In the future we'll want to improve this feature by</p> <ul> <li>[[materialized-backlinks]]</li> <li>Providing more context around back link reference</li> <li>Could be done by tweaking Markdown Notes slightly. Maybe a user setting?</li> <li>Make back links editable using VS Code Search Editors</li> <li>Suggested by @Jash on Discord</li> </ul>"},{"location":"recipes/markup-converter/","title":"Markup Converter","text":"<p>This #recipe allows you to convert any document into Markdown for storing them in your notes.</p> <p>We will be using Pandoc, a popular universal document converter. It can convert documents in Microsoft Word, HTML, LaTeX, and many other formats to various formats including markdown and many others.</p>"},{"location":"recipes/markup-converter/#instructions","title":"Instructions","text":"<p>We will go through the example of converting Microsoft Word documents to Markdown. For detailed instructions on how to use Pandoc, please refer to the Pandoc documentation.</p> <ol> <li>Install Pandoc</li> <li>Open the terminal of your choice and verify that Pandoc is installed by running <code>pandoc --version</code></li> <li>Copy the Microsoft Word documents that you want to convert into a new folder</li> <li>Change the current directory to the folder containing the Microsoft Word documents</li> <li>Copy one of the following commands (based on your operating system) into your terminal and press <code>Enter</code> to run</li> </ol>"},{"location":"recipes/markup-converter/#linux-and-macos-bash","title":"Linux and macOS (Bash)","text":"<pre><code>find -name \"*.docx\" -type f -exec sh -c '\n      for f; do\n         pandoc --extract-media=./ -f docx -t markdown -o \"${f%.*}.md\" \"$f\"\n      done\n   ' find-sh {} +\n</code></pre>"},{"location":"recipes/markup-converter/#windows-powershell","title":"Windows (PowerShell)","text":"<pre><code>Get-ChildItem . -Filter *.docx | \nForeach-Object {\n    pandoc --extract-media=./ --from docx --to markdown $_ -o $_.Name.Replace('.docx', '.md')\n}\n</code></pre>"},{"location":"recipes/markup-converter/#relevant-configurations","title":"Relevant Configurations","text":"<p>Pandoc accepts a range of command line arguments to control the conversion process. Here, we'll mention a few that are relevant to the example above.</p> <ul> <li><code>--extract-media=./</code> is used to extract the images from the Microsoft Word documents and store them in a subfolder named <code>media</code></li> <li><code>-t markdown</code> converts the Microsoft Word documents to Pandoc\u2019s Markdown. You can also use <code>-t gfm</code> to convert to GitHub Flavored Markdown</li> </ul> <p>Note that you may want to review the converted Markdown files to ensure that the conversion was successful. Then, You may want to delete the original Microsoft Word documents.</p>"},{"location":"recipes/migrating-from-obsidian/","title":"Migrating from Obsidian (stub)","text":"<p>todo This [[roadmap]] item needs more specification work.</p> <p>If you're interested in working on it, please start a conversation in GitHub issues.</p>"},{"location":"recipes/migrating-from-onenote/","title":"Migrating from OneNote","text":"<p>This guide mostly duplicates the instructions at the repo for the PowerShell script.</p>"},{"location":"recipes/migrating-from-onenote/#summary","title":"Summary","text":"<p>The powershell script 'ConvertOneNote2MarkDown-v2.ps1' will utilize the OneNote Object Model on your workstation to convert all OneNote pages to Word documents and then utilizes PanDoc to convert the Word documents to Markdown (.md) format. It will also:</p> <ul> <li>Create a folder structure for your Notebooks and Sections.</li> <li>Process pages that are in sections at the Notebook, Section Group and 1<sup>st</sup> Nested Section Group levels.</li> <li>Allow you you choose between putting all Images in a central '/media' folder for each notebook, or in a separate '/media' folder in each folder of the hierarchy.</li> <li>Fix image references in the resulting .md files, generating relative references to the image files within the markdown document.</li> <li>A title, description, and date header will be added to each file as well.</li> <li>And more (see details at repo)!</li> </ul>"},{"location":"recipes/migrating-from-onenote/#usage","title":"Usage","text":"<ol> <li>Start the OneNote application. All notebooks currently loaded in OneNote will be converted.</li> <li>It is advised that you install Onetastic and the attached macro, which will automatically expand any collapsed paragraphs in the notebook. They won't be exported otherwise.<ul> <li>To install the macro, click the New Macro Button within the Onetastic Toolbar and then select File -&gt; Import and select the .xml macro included in the release.</li> <li>Run the macro for each Notebook that is open</li> </ul> </li> <li>For the next sections, it is highly recommended that you use VS Code, and its embedded PowerShell terminal, as this allows you to edit and run the script, as well as check the results of the .md output all in one window.</li> <li>Whatever you choose, you will need to do the following:</li> <li>Clone the script to your computer (see here, if you're unfamiliar with git).</li> <li>Once cloned, navigate to the repo folder. In VS Code, use File -&gt; Add Folder to Workspace, right click on the folder in the left side bar and click Open In Integrated Terminal.</li> <li>Run the script by executing <code>.\\ConvertOnenote2Markdown-v2</code><ul> <li>if you receive an error, try running this line to bypass security:  <code>Set-ExecutionPolicy Bypass -Scope Process</code></li> <li>if you still have trouble, try running both Onenote and Powershell as an administrator.</li> </ul> </li> <li>It will ask you for the path to store the markdown folder structure. Please use an empty folder. If using VS Code, you might not be able to paste the filepath - right click on the blinking cursor and it will paste from clipboard. Attention: use a full absolute path for the destination.</li> <li>Read the prompts carefully to select your desired options. If you aren't actively editing your pages in Onenote, it is HIGHLY recommended that you don't delete the intermediate word docs, as they take 80+% of the time to generate. They are stored in their own folder, out of the way. You can then quickly re-run the script with different parameters until you find what you like.</li> <li>Sit back and wait until the process completes.</li> <li>To stop the process at any time, press Ctrl+C.</li> <li>If you like, you can inspect some of the .md files prior to completion. If you're not happy with the results, stop the process, delete the .md and re-run with different parameters.</li> <li>At this point, you should be ready to load the new directory into Foam!</li> </ol>"},{"location":"recipes/migrating-from-roam/","title":"Migrating from Roam (stub)","text":"<p>todo This [[roadmap]] item needs more specification work.</p> <p>If you're interested in working on it, please start a conversation in GitHub issues.</p>"},{"location":"recipes/note-macros/","title":"Custom Note Macros","text":"<p>This #recipe allows you to create custom note macros.</p>"},{"location":"recipes/note-macros/#installation","title":"Installation","text":"<p>This extension is not included in the template</p> <p>To install search note-macros in vscode or head to note-macros - Visual Studio Marketplace</p>"},{"location":"recipes/note-macros/#instructions","title":"Instructions","text":""},{"location":"recipes/note-macros/#run-macro-from-command-pallette","title":"Run macro From command pallette","text":"<p>Simply use <code>Ctrl+P</code> or <code>Alt+P</code> depend on your os, and type <code>Note Macros: Run A Macro</code> then chose the macro you want to execute.</p>"},{"location":"recipes/note-macros/#create-custom-note-macros","title":"Create Custom Note Macros","text":"<p>Create your own custom macros by adding them to your <code>settings.json</code> (Code|File &gt; Preferences &gt; User Settings). A full example can be found at settings.json</p> <p>For example:</p> <p>This macro creates a Weekly note in the Weekly note Directory.</p> <pre><code>{\n  \"note-macros\": {\n    \"Weekly\": [\n      {\n        \"type\": \"note\",\n        \"directory\": \"Weekly\",\n        \"extension\": \".md\",\n        \"name\": \"weekly-note\",\n        \"date\": \"yyyy-W\"\n      }\n    ]\n  }\n}\n</code></pre> <p>For an explanation of the fields please go to note-macros - Explanation of Fields</p>"},{"location":"recipes/note-macros/#add-keybindings-to-run-your-macros","title":"Add Keybindings to Run your Macros","text":"<p>in <code>keybindings.json</code> (Code|File &gt; Preferences &gt; Keyboard Shortcuts) add bindings to your macros:</p> <pre><code>{\n  \"key\": \"ctrl+cmd+/\",\n  \"command\": \"note-macros.Weekly\"\n}\n</code></pre>"},{"location":"recipes/note-macros/#issues-and-feedback","title":"Issues and Feedback","text":"<p>If you have any issues or questions please look at the README.md on the note-macros GitHub.</p> <p>If you run into any issues that are not fixed by referring to the README or feature requests please open an issue.</p>"},{"location":"recipes/predefined-user-snippets/","title":"Pre-defined User Snippets","text":"<p>This #recipe allows us to introduce Roam style commands to Foam, by using VS Code Snippets. Consider the below snippets:</p> <pre><code>{\n  \"Zettelkasten Id\": {\n    \"scope\": \"markdown\",\n    \"prefix\": \"/id\",\n    \"description\": \"Zettelkasten Id\",\n    \"body\": [\n      \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\"\n    ]\n  },\n  \"Current date\": {\n    \"scope\": \"markdown\",\n    \"prefix\": \"/date\",\n    \"description\": \"Current date\",\n    \"body\": [\n      \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\"\n    ]\n  }\n}\n</code></pre> <p>Which would look like: </p> <p>Using snippets enables Foam users to add custom-snippets themselves so they live alongside the first-class <code>/commands</code>.</p>"},{"location":"recipes/predefined-user-snippets/#notes-considerations","title":"Notes &amp; Considerations","text":"<ul> <li>VS Code supplies \"commands\" already via the command palette</li> <li>Consider the UX around this. Users less familiar with VS Code are more likely to be familiar with <code>/</code> to trigger a command menu. Experienced VS Code users may be more likely to favour the command palette.</li> <li>We can use <code>TabCompletionProvider</code> and <code>snippets</code> and mix them (maybe) via the following VS Code setting: <code>\"editor.snippetSuggestions\": \"inline\" | \"top\" | \"bottom\" | \"none\"</code></li> <li>For more discussion, consult the PR here.</li> </ul>"},{"location":"recipes/predefined-user-snippets/#simplifying-markdown-syntax","title":"Simplifying Markdown Syntax","text":"<p>Some markdown syntax is difficult for users who have never authored markdown before. Take for example a checkbox/todo. The following syntax is required:</p> <pre><code>- [ ] Something todo...\n</code></pre> <p>We could provide snippets that expand out into the associated markdown syntax, like in the below GIF: </p> <p>The JSON for these snippets can be found here.</p>"},{"location":"recipes/real-time-collaboration/","title":"Real-time Collaboration","text":"<p>This #recipe is here to just tell you that VS Code Live Share will allow you to collaborate live on your notes.</p>"},{"location":"recipes/recipes/","title":"Recipes","text":""},{"location":"recipes/recipes/#recipes","title":"Recipes","text":"<p>A #recipe is a guide, tip or strategy for getting the most out of your Foam workspace!</p> <ul> <li>Contribute</li> <li>Take smart notes</li> <li>Discover</li> <li>Organise</li> <li>Write</li> <li>Version control</li> <li>Publish</li> <li>Collaborate</li> <li>Workflow</li> <li>Creative ideas</li> <li>Other</li> </ul>"},{"location":"recipes/recipes/#contribute","title":"Contribute","text":"<ul> <li>Start by reading [[contribution-guide]]</li> <li>If you discover features not listed here, we'd love to have them! how-to-write-recipes.</li> </ul>"},{"location":"recipes/recipes/#take-smart-notes","title":"Take smart notes","text":"<ul> <li>Introduction to Zettelkasten todo</li> <li>Clip webpages with web-clipper</li> <li>Convert Microsoft Word files into Markdown with markup-converter</li> </ul>"},{"location":"recipes/recipes/#discover","title":"Discover","text":"<ul> <li>Explore your notes using graph-visualization</li> <li>Discover relationships with backlinking</li> <li>Simulating [[unlinked-references]]</li> </ul>"},{"location":"recipes/recipes/#organise","title":"Organise","text":"<ul> <li>Using backlinking for reference lists.</li> </ul>"},{"location":"recipes/recipes/#write","title":"Write","text":"<ul> <li>Link documents with wikilinks.</li> <li>Use shortcuts for creating-new-notes</li> <li>Instantly create and access your daily-notes</li> <li>Add and explore tags</li> <li>Create note-templates</li> <li>Find orphans</li> <li>Use custom note-macros to create weekly, monthly etc. notes</li> <li>Draw diagrams-in-markdown</li> <li>Prettify your links, automatically-expand-urls-to-well-titled-links</li> <li>Style your environment with custom-markdown-preview-styles</li> <li>Paste and link add-images-to-notes</li> <li>shows-image-preview-on-hover</li> <li>Markdown All-in-One features todo [[good-first-task]]</li> <li>Manage checklists</li> <li>Automatic Table of Contents</li> <li>Live preview markdown</li> <li>More...</li> <li>VS Code Advanced Features todo [[good-first-task]]</li> <li>Focus with Zen Mode</li> <li>Display content of other notes in the preview tab by including-notes</li> </ul>"},{"location":"recipes/recipes/#version-control","title":"Version control","text":"<ul> <li>Quick commits with VS Code's built in [[git-integration]]</li> <li>Store your workspace in an auto-synced GitHub repo with write-your-notes-in-github-gist</li> <li>Sync your GitHub repo automatically using the GitDoc VSCode Plugin automatic-git-syncing.</li> </ul>"},{"location":"recipes/recipes/#publish","title":"Publish","text":"<ul> <li>Publish using official Foam template</li> <li>Publish to publish-to-github-pages</li> <li>Publish to publish-to-gitlab-pages</li> <li>Publish to publish-to-azure-devops-wiki</li> <li>Publish to publish-to-vercel</li> <li>Publish using community templates</li> <li>publish-to-netlify-with-eleventy by @juanfrank77</li> <li> <p>generate-gatsby-site by @mathieudutour and @hikerpig</p> </li> <li> <p>Make the site your own by publish-to-github.</p> </li> <li>Render math symbols, by either</li> <li>adding client-side math-support-with-mathjax to the default publish-to-github-pages site</li> <li>adding a custom Jekyll plugin to support math-support-with-katex</li> </ul>"},{"location":"recipes/recipes/#collaborate","title":"Collaborate","text":"<ul> <li>Give your team push access to your GitHub repo</li> <li>Real-time collaboration via VS Code Live Share real-time-collaboration</li> <li>Accept patches via GitHub PRs todo</li> </ul>"},{"location":"recipes/recipes/#workflow","title":"Workflow","text":"<ul> <li>Capture notes from Drafts app on iOS capture-notes-with-drafts-pro</li> <li>Capture notes from iOS Shortcuts capture-notes-with-shortcuts-and-github-actions</li> </ul>"},{"location":"recipes/recipes/#creative-ideas","title":"Creative ideas","text":"<p>Creative ideas welcome!</p> <ul> <li>Support Anki cards from notes like Remnote todo</li> </ul> <p>See [[contribution-guide]] and how-to-write-recipes.</p>"},{"location":"recipes/recipes/#other","title":"Other","text":"<p>Thought of a recipe but don't see a category for them? Add them here and we'll organise them once we detect a theme.</p> <p>See [[contribution-guide]] and how-to-write-recipes.</p>"},{"location":"recipes/search-for-notes/","title":"Search for Notes","text":"<p>This #recipe contains tips on how to leverage VS Code search features.</p> <p>todo Add more VS Code search power user tips here</p> <p>Run <code>Cmd</code> + <code>P</code> ( <code>Ctrl</code> +  <code>P</code> on Windows ) and type a name (like 'issues') to find a note associated with that name (like 'known-issues.md' )</p> <p>Run <code>Cmd</code> + <code>Shift</code> + <code>F</code> ( <code>Ctrl</code> + <code>Shift</code> + <code>F</code> on Windows ) and type a word (like 'links') to find all the notes that contain that term.</p>"},{"location":"recipes/shows-image-preview-on-hover/","title":"Shows Image Preview on Hover","text":"<p>This #recipe allows you to see a preview of an image on hover.</p> <p>Use extension: Image preview to shows image preview in the gutter and on hover</p> <p>It looks like this</p> <p> </p>"},{"location":"recipes/take-notes-from-mobile-phone/","title":"Take notes on mobile phones","text":"<p>This #recipe offers solutions to taking Foam notes on the go.</p> <p>For the time being we have decided to not build a mobile app, but rely on third parties (see [[build-vs-assemble]]).</p> <p>The most promising options are:</p>"},{"location":"recipes/take-notes-from-mobile-phone/#gitjournal","title":"GitJournal","text":"<p>Pros</p> <ul> <li>Open source</li> <li>Already a usable solution.</li> <li>Provides functionality to edit, create, and browser markdown files.</li> <li>Support journal mode, todo lists, and free writing</li> <li>Syncs to GitHub repo</li> <li>Supports Wikilinks</li> <li>Supports Backlinks</li> <li>Developer is happy to prioritize Foam compatibility</li> </ul> <p>Cons</p> <ul> <li>Doesn't generate link reference lists (but this is ok, since workspace-janitor as a GitHub action can solve this)</li> <li>Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc.</li> <li>Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users.</li> </ul> <p>Verdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a bespoke mobile app.</p>"},{"location":"recipes/take-notes-from-mobile-phone/#github-codespaces","title":"GitHub Codespaces","text":"<p>Pros</p> <ul> <li>Works out of the box just like the desktop app</li> </ul> <p>Cons</p> <ul> <li>not generally available quite yet</li> <li>Pricing</li> </ul> <p>For a quick demo, see https://www.youtube.com/watch?v=KI5m4Uy8_4I.</p> <p>Verdict: Good. Pricing should be reasonable for taking notes on the fly. Harder to assess for people who would constantly use Foam from mobile phone.</p>"},{"location":"recipes/take-notes-from-mobile-phone/#bespoke-mobile-app-for-foam","title":"Bespoke mobile app for Foam","text":"<p>Given we already have a solution, why would we spend time and effort building a bespoke mobile app?</p> <ul> <li>Taking notes on the go is a key part of a good note taking process, and the process should feel effortless</li> <li>Having a custom app could help us support key user workflows in a more Foam-specific manner</li> </ul> <p>If such an app was worth building, it would have to have the following features:</p> <ul> <li>Instant loading and syncing for quick notes</li> <li>Sleek, simple, beautifully designed user experience.</li> <li>Ability to search and navigate forward links and back links (only in paid GitJournal version)</li> <li>Killer feature that makes it the best note taking tool for Foam (?)</li> </ul> <p>Given the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on Foam Discord.</p>"},{"location":"recipes/web-clipper/","title":"Web Clipper","text":"<p>This #recipe allows you to convert any web content into Markdown for storing them in your notes.</p> <p>There are a couple of options when it comes to clipping web pages:</p> <ul> <li>Web Clipper</li> <li> <p>This is a Web Clipper as a VSCode extension, takes a webpage URL and outputs Markdown. Uses mercury</p> </li> <li> <p>Markdown Clipper</p> </li> <li> <p>A Firefox and Google Chrome extension to clip websites and download them into a readable markdown file.</p> </li> <li> <p>Web Clipper</p> </li> <li>A Firefox, Chrome and Edge extension to clip websites and save them directly to the GitHub repository into a readable markdown file.</li> </ul>"},{"location":"recipes/write-your-notes-in-github-gist/","title":"Write your notes in GitHub Gist","text":"<p>This #recipe will allow you to persist your notes in a GitHub repository, and automatically sync changes without needing to manually commit/push/pull, then GistPad might be an option worth exploring.</p> <p>GistPad is a Visual Studio Code extension that allows you to edit your GitHub gists and repos, without needing to clone anything locally.</p> <p>It provides support for editing Foam workspaces, complete with <code>[[link]]</code> completion/navigation, daily pages, pasting images and backlinks.</p> <p></p>"},{"location":"recipes/write-your-notes-in-github-gist/#getting-started","title":"Getting started","text":"<p>To start using GistPad for your Foam-based knowledge base, simply perform the following steps:</p> <ol> <li> <p>Download the GistPad extension and then re-start Visual Studio Code</p> </li> <li> <p>Run the <code>GistPad: Sign In</code> command and then complete the authentication flow using your GitHub account</p> </li> <li> <p>Run the <code>GistPad: Open Repository</code> command and select the <code>Create repo from template...</code> or <code>Create private repo from template...</code> depending on your preference</p> </li> <li> <p>Select the <code>Foam-style wiki</code> template, and then specify a name for your Foam workspace (e.g. <code>my-foam-notes</code>, <code>johns-knowledge-base</code>)</p> </li> </ol> <p>Your new repo will be created in your GitHub account, and the <code>Foam</code> welcome page will be automatically opened. If you already have an existing Foam workspace in GitHub, then when you run step #3 above, simply select or specify the name of the GitHub repository instead.</p> <p>Note: If you have any and all feedback on how GistPad can be improved to support your Foam workflow, please don't hesitate to let us know! \ud83d\udc4d</p> <p></p>"},{"location":"recipes/write-your-notes-in-github-gist/#managing-your-workspace","title":"Managing your workspace","text":"<p>Once you've opened/created the Foam repository, it will appear in the <code>Repositories</code> view of the <code>GistPad</code> tab (the one with the little notebook icon). From this tree view, you can add/edit/delete/rename new pages, upload local files, as well as view the backlinks for each page (they appear as child notes of a page).</p> <p></p>"},{"location":"recipes/write-your-notes-in-github-gist/#editing-your-workspace","title":"Editing your workspace","text":"<p>When you create or open a page, you can edit the markdown content as usual, as well as paste images, and create <code>[[links]]</code> to other pages. When you type <code>[[</code>, you'll receive auto-completion for the existing pages in your workspace, and you can also automatically create new pages by simply creating a link to it.</p> <p>Since you're using the Visual Studio Code markdown editor, you can benefit from all of the rich language services (e.g. syntax highlighting, header collapsing), as well as the extension ecosystem (e.g. Emojisense).</p>"},{"location":"recipes/write-your-notes-in-github-gist/#navigating-your-workspace","title":"Navigating your workspace","text":"<p>When editing a file, you can easily navigate <code>[[links]]</code> by hovering over them to see a preview of their contents and/or <code>cmd+clicking</code> on them in order to jump to the respective page. Furthermore, when you add a link to a page, a backlink is automatically added to it.</p> <p>You can view a page's backlinks using either of the following techniques:</p> <ol> <li> <p>Expanding the file's node in the <code>Repositories</code> tree, since it's child nodes will represent backlinks. This makes it easy to browse your pages and their backlinks in a single hierarchical view.</p> </li> <li> <p>Opening a file, and then viewing it's backlinks list at the bottom of the editor view. This makes it easy to read a page and then see its backlinks in a contextually rich way.</p> </li> </ol>"},{"location":"recipes/write-your-notes-in-github-gist/#daily-pages","title":"Daily Pages","text":"<p>In addition to creating arbitrary pages, you can use GistPad for journaling or capturing daily notes. Simply click the calendar icon in the <code>Repositories</code> tree, which will open up the page that represents today. If the page doesn't already exist, then it will be created in the workspace before being opened.</p> <p></p>"},{"location":"tools/cli/","title":"Command Line Interface","text":"<p>Create a CLI tool to allow running common Foam commands. These may include:</p> <ul> <li><code>foam init</code> - create a new foam workspace</li> <li><code>foam janitor</code> - run workspace-janitor in current workspace</li> <li><code>foam migrate &lt;tool&gt;</code> - migrate from tools like roam exports, obsidian and more</li> </ul> <p>More commands to be added.</p>"},{"location":"tools/foam-logging-in-vscode/","title":"Foam logging in VsCode","text":"<p>The Foam extension logs details about what its doing in vscode's <code>Output</code> tab. Generally this is only useful if you're reporting an issue about Foam.</p> <ol> <li>To show the tab, click on <code>View &gt; Output</code>.</li> <li>In the dropdown on the right of the tab, select <code>Foam</code>.</li> </ol> <p></p> <p>When reporting an issue about Foam, set the log level to <code>Debug</code>:</p>"},{"location":"tools/foam-logging-in-vscode/#change-the-log-level-for-the-session","title":"Change the log level for the session","text":"<p>Execute the command <code>Foam: Set log level</code>.</p>"},{"location":"tools/foam-logging-in-vscode/#change-the-default-logging-level","title":"Change the default logging level","text":"<ol> <li>Open workspace settings (<code>cmd+,</code>, or execute the <code>Preferences: Open Workspace Settings</code> command)</li> <li>Look for the entry <code>Foam &gt; Logging: Level</code></li> </ol>"},{"location":"tools/orphans/","title":"Orphaned Notes","text":"<p>Foam helps you to find orphans: notes that have neither forward links nor backlinks.</p> <p>Orphans can be found in the Orphans panel.</p> <p>Two settings allows you to control the behaviour of the Orphans panel:</p> <ul> <li><code>foam.orphans.exclude</code>: list of glob patterns that will be used to exclude directories. For example, a value of <code>[\"journal/**/*\"]</code> would exclude your daily notes.</li> <li><code>foam.orphans.groupBy</code>: sets the default view mode of the Orphans panel: either groups by folder (by default), or lists all orphans. The view can be toggled on the fly from the panel, but it won't overwrite the setting.</li> </ul>"},{"location":"tools/workspace-janitor/","title":"Janitor","text":"<p>To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes.</p> <p>Foam Janitor (inspired by Andy Matuschak's note-link-janitor) helps you migrate existing notes to Foam, and maintain your Foam's health over time.</p> <p>Currently, Foam's Janitor helps you to:</p> <ul> <li>Ensure your link-reference-definitions are up to date</li> <li>Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility)</li> </ul> <p>In the future, Janitor can help you with</p> <ul> <li>Updating [[materialized-backlinks]]</li> <li>Lint, format and structure notes</li> <li>Rename and move notes around while keeping their references up to date.</li> </ul>"},{"location":"tools/workspace-janitor/#using-janitor-from-vs-code-experimental","title":"Using Janitor from VS Code (Experimental)","text":"<p>Execute the \"Foam: Run Janitor\" command from the command palette.</p> <p></p>"},{"location":"tools/workspace-janitor/#using-janitor-from-command-line-experimental","title":"Using Janitor from command line (Experimental)","text":"<p>\u26a0\ufe0f Improvements to this documentation are welcome!</p> <p>The Janitor can be installed from NPM and executed as a standalone CLI tool:</p> <pre><code>&gt; npm install -g foam-cli\n&gt; foam janitor path/to/workspace\n</code></pre> <p>You can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps.</p> <p>You can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via GitJournal), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.</p>"}]}